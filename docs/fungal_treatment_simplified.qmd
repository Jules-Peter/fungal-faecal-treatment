---
title: "Evaluation of Fungal Species for Fecal Treatment: Growth Performance and E. coli Reduction"
author: "Research Team"
date: today
format: 
  html:
    toc: true
    toc-depth: 3
    number-sections: true
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = FALSE, warning = FALSE, message = FALSE, 
                      fig.width = 10, fig.height = 6, dpi = 300)

# Load required packages with error handling
required_packages <- c(
  "tidyverse", "here", "ggplot2", "scales", "knitr",
  "lme4", "lmerTest", "emmeans", "broom.mixed",
  "performance", "see", "patchwork", "nortest",
  "car", "pwr", "effectsize", "report"
)

# Install missing packages
missing_packages <- required_packages[!sapply(required_packages, requireNamespace, quietly = TRUE)]
if (length(missing_packages) > 0) {
  install.packages(missing_packages, repos = "https://cran.r-project.org")
}

# Load packages
suppressMessages({
  library(tidyverse)
  library(here)
  library(ggplot2) 
  library(scales)
  library(knitr)
  library(lme4)
  library(lmerTest)
  library(emmeans)
  library(broom.mixed)
  library(performance)
  library(see)
  library(patchwork)
  library(nortest)
  library(car)
  library(pwr)
  library(effectsize)
  library(report)
})

# Set global options
options(
  contrasts = c("contr.treatment", "contr.poly"),
  knitr.kable.NA = "",
  digits = 3
)

# Define analysis parameters
ALPHA_LEVEL <- 0.05
MIN_BIOLOGICAL_REPS <- 3
MIN_OBSERVATIONS_PER_SPECIES <- 5
OUTLIER_THRESHOLD <- 3  # MAD threshold for outlier detection
PRACTICAL_SIGNIFICANCE_GROWTH <- 2  # cm² minimum meaningful difference
PRACTICAL_SIGNIFICANCE_ECOLI <- 1   # log reduction minimum meaningful difference
MAX_PLATE_AREA <- 63.62  # cm² - maximum possible growth area (full plate coverage)

# Define helper functions
source_if_exists <- function(file) {
  if (file.exists(file)) source(file)
}

# Robust outlier detection using MAD
detect_outliers <- function(x, threshold = 3) {
  mad_val <- mad(x, na.rm = TRUE)
  median_val <- median(x, na.rm = TRUE)
  abs(x - median_val) > threshold * mad_val
}

# Effect size interpretation
interpret_effect_size <- function(eta_squared) {
  case_when(
    eta_squared < 0.01 ~ "negligible",
    eta_squared < 0.06 ~ "small", 
    eta_squared < 0.14 ~ "medium",
    TRUE ~ "large"
  )
}
```

# Executive Summary

```{r executive-summary, results='asis'}
# Load and prepare data for executive summary
exp_data <- read_csv(here("data/processed/experiment_final.csv"), show_col_types = FALSE) %>%
  mutate(
    experiment = case_when(
      experiment == "1_1" ~ "Experiment 1.1",
      experiment == "1_2" ~ "Experiment 1.2",
      TRUE ~ experiment
    ),
    species = ifelse(species == "ctrl", "Control", species),
    area_percent_change = growth_14dpi,
    e_coli_log_reduction = ifelse(!is.na(ecoli_conc_mean) & !is.na(ecoli_conc_14dpi) & ecoli_conc_mean > 0 & ecoli_conc_14dpi > 0,
                                  log10(ecoli_conc_mean) - log10(ecoli_conc_14dpi),
                                  NA_real_),
    # Calculate plate coverage percentage
    plate_coverage_14dpi = (area_size_14dpi / MAX_PLATE_AREA) * 100,
    plate_coverage_0dpi = (area_size_0dpi / MAX_PLATE_AREA) * 100,
    reached_full_coverage = area_size_14dpi >= (MAX_PLATE_AREA * 0.95)  # 95% threshold for "full" coverage
  )

# Calculate key metrics
key_metrics <- exp_data %>%
  filter(species != "Control") %>%
  group_by(experiment) %>%
  summarise(
    n_species = n_distinct(species),
    n_samples = n(),
    mean_growth = mean(area_percent_change, na.rm = TRUE),
    max_growth = max(area_percent_change, na.rm = TRUE),
    ecoli_reduction_species = sum(!is.na(e_coli_log_reduction)),
    mean_ecoli_reduction = mean(e_coli_log_reduction, na.rm = TRUE),
    .groups = "drop"
  )

# Top performers across experiments
top_growth <- exp_data %>%
  filter(species != "Control", !is.na(area_percent_change)) %>%
  group_by(species) %>%
  summarise(
    mean_growth = mean(area_percent_change, na.rm = TRUE),
    n_experiments = n_distinct(experiment),
    .groups = "drop"
  ) %>%
  arrange(desc(mean_growth)) %>%
  head(3)

top_ecoli <- exp_data %>%
  filter(species != "Control", !is.na(e_coli_log_reduction)) %>%
  group_by(species) %>%
  summarise(
    mean_reduction = mean(e_coli_log_reduction, na.rm = TRUE),
    n_samples = n(),
    .groups = "drop"
  ) %>%
  arrange(desc(mean_reduction)) %>%
  head(3)
```

## Key Findings at a Glance

### Overall Performance Metrics

```{r summary-table}
kable(
  key_metrics %>%
    mutate(across(where(is.numeric), ~ round(.x, 1))),
  caption = "**Table 1.** Overview of experimental results across both trials",
  col.names = c("Experiment", "Species Tested", "Total Samples", 
                "Mean Growth (%)", "Max Growth (%)", 
                "Species w/ E.coli Data", "Mean Log Reduction")
)
```

### Top Performing Species

**Fungal Growth Champions:**
- **`r if(nrow(top_growth) > 0) top_growth$species[1] else "N/A"`**: `r if(nrow(top_growth) > 0) round(top_growth$mean_growth[1], 1) else "N/A"`% average growth
- **`r if(nrow(top_growth) > 1) top_growth$species[2] else "N/A"`**: `r if(nrow(top_growth) > 1) round(top_growth$mean_growth[2], 1) else "N/A"`% average growth  
- **`r if(nrow(top_growth) > 2) top_growth$species[3] else "N/A"`**: `r if(nrow(top_growth) > 2) round(top_growth$mean_growth[3], 1) else "N/A"`% average growth

*Note: Growth measured up to plate maximum of 63.62 cm². High-performing species may be growth-limited by available space.*

**E. coli Reduction Leaders:**
`r if(nrow(top_ecoli) > 0) paste0("- **", top_ecoli$species[1], "**: ", round(top_ecoli$mean_reduction[1], 2), " log reduction (n=", top_ecoli$n_samples[1], ")\\n- **", if(nrow(top_ecoli) > 1) top_ecoli$species[2] else "N/A", "**: ", if(nrow(top_ecoli) > 1) round(top_ecoli$mean_reduction[2], 2) else "N/A", if(nrow(top_ecoli) > 1) paste0(" log reduction (n=", top_ecoli$n_samples[2], ")") else "") else "Limited E. coli data available"`

# Introduction

Fungal treatment of fecal matter offers a promising biological approach for waste management that can simultaneously reduce pathogenic microorganisms and decompose organic matter. This study evaluates multiple fungal species for their growth performance and antimicrobial effectiveness.

## Objectives

1. **Growth performance**: Assess fungal colony expansion over time as an indicator of decomposition capacity
2. **Antimicrobial effectiveness**: Measure reduction of *E. coli* concentrations as a proxy for pathogen elimination  
3. **Species ranking**: Identify optimal species for practical applications
4. **Decomposition efficiency**: Evaluate weight loss and moisture changes during treatment

# Methods

The experiment employed a randomized design with multiple fungal species tested on fecal substrate. Growth was measured as colony area size at 0, 7, and 14 days post-inoculation (dpi). *E. coli* concentrations were measured at baseline and 14 dpi to assess antimicrobial effectiveness.

## Growth Measurement Constraints

The maximum possible growth area is **63.62 cm²** (full plate coverage). Species reaching >95% plate coverage (60.44 cm²) are considered growth-limited by available space rather than biological constraints. For such species, normalized growth rates are calculated based on available space to provide more accurate growth potential assessments:

**Normalized Growth Rate** = (Actual Growth ÷ Available Space at Day 0) × 100%
**Plate Coverage** = (Colony Area ÷ 63.62 cm²) × 100%

These metrics better represent intrinsic growth capacity for fast-growing species that reach the plate boundary. Species showing >95% plate coverage are considered "growth-limited" and may have underestimated growth potential in traditional percentage calculations.

```{r data-import}
# Load experimental data with robust error handling
data_path <- here("data", "processed", "experiment_final.csv")

if (!file.exists(data_path)) {
  stop("Could not find experiment_final.csv at: ", data_path, "\n",
       "Please run the data processing scripts first:\n",
       "  - R/01-data_download.R\n",
       "  - R/data_cleaning_new.R")
}

# Read with explicit NA strings specification
experiment_data_raw <- read_csv(data_path, 
                                show_col_types = FALSE,
                                na = c("", "NA", "na", "NULL"))

message("✓ Data loaded from: ", data_path)
message("  Rows: ", nrow(experiment_data_raw))
message("  Columns: ", ncol(experiment_data_raw))

# Data validation and cleaning with safer approach
experiment_data <- experiment_data_raw %>%
  # Filter for experiment 1_1 only (default if no experiment column)
  filter(is.na(experiment) | experiment == "1_1") %>%
  # Convert columns individually with error handling
  mutate(
    # Handle area size columns
    area_size_0dpi = suppressWarnings(as.numeric(area_size_0dpi)),
    area_size_7dpi = suppressWarnings(as.numeric(area_size_7dpi)),
    area_size_14dpi = suppressWarnings(as.numeric(area_size_14dpi)),
    
    # Handle E. coli columns  
    ecoli_conc_mean = suppressWarnings(as.numeric(ecoli_conc_mean)),
    ecoli_conc_14dpi = suppressWarnings(as.numeric(ecoli_conc_14dpi)),
    
    # Create standardized identifiers
    bio_replicate_id = str_c(species, id_faeces, starting_date, sep = "_"),
    tech_replicate_id = str_c(bio_replicate_id, id_treatment, sep = "_"),
    
    # Clean and standardize species names - group similar treatments
    species = str_trim(species),
    species = if_else(is.na(species) | species == "", "unknown", species),
    
    # Standardize species names to group only actual duplicates/typos
    species_standardized = case_when(
      # Group T. harzianum strains that are the same species but different names
      str_detect(species, "T\\. harzianum T22") ~ "T. harzianum T22",
      str_detect(species, "T\\. harzianum CBS245.93") ~ "T. harzianum CBS245.93",
      
      # Keep Sordaria strains separate as F33 and F35 are different strains
      species == "F33 Sordaria" ~ "F33 Sordaria",
      species == "F35 Sordaria" ~ "F35 Sordaria", 
      
      # Keep other species as they are - only standardize clear typos/formatting issues
      str_detect(species, "T\\. atroviridae") ~ "T. atroviridae", 
      str_detect(species, "T\\. virens") ~ "T. virens",
      str_detect(species, "T\\. gamsii") ~ "T. gamsii",
      str_detect(species, "T\\. koningii") ~ "T. koningii",
      str_detect(species, "T\\. veluntinum") ~ "T. veluntinum",
      str_detect(species, "P\\. ostreatus") ~ "P. ostreatus",
      str_detect(species, "C\\. comatus") ~ "C. comatus",
      str_detect(species, "Mucor") ~ "Mucor spp",
      str_detect(species, "Faecal isolate") ~ "Faecal isolate",
      str_detect(species, "Panaeolous") ~ "Panaeolous spp",
      str_detect(species, "F37 Mold") ~ "F37 Mold",
      str_detect(species, "F39 Thermo tolerant") ~ "F39 Thermotolerant",
      species == "ctrl" ~ "ctrl",
      TRUE ~ species
    ),
    
    # Use standardized species name for analysis
    species = species_standardized
  ) %>%
  # Remove completely empty rows (keep if at least one measurement exists)
  filter(!(is.na(area_size_0dpi) & is.na(area_size_7dpi) & is.na(area_size_14dpi) & 
           is.na(ecoli_conc_mean) & is.na(ecoli_conc_14dpi))) %>%
  # Fill in missing 14dpi values for Sordaria strains
  mutate(
    area_size_14dpi = case_when(
      species %in% c("F33 Sordaria", "F35 Sordaria") & is.na(area_size_14dpi) ~ 63.617,
      TRUE ~ area_size_14dpi
    )
  ) %>%
  # Add data quality flags
  mutate(
    has_growth_data = !is.na(area_size_0dpi),
    has_ecoli_data = !is.na(ecoli_conc_mean) & !is.na(ecoli_conc_14dpi),
    measurement_completeness = case_when(
      !is.na(area_size_14dpi) ~ "complete_14d",
      !is.na(area_size_7dpi) ~ "complete_7d", 
      !is.na(area_size_0dpi) ~ "baseline_only",
      TRUE ~ "no_growth_data"
    )
  )

# Data summary with validation
data_summary <- experiment_data %>%
  summarise(
    total_observations = n(),
    unique_species = n_distinct(species),
    unique_bio_replicates = n_distinct(bio_replicate_id),
    has_growth = sum(has_growth_data),
    has_ecoli = sum(has_ecoli_data),
    complete_cases = sum(has_growth_data & has_ecoli_data),
    .groups = "drop"
  )

message("Dataset Summary:")
message("- Total observations: ", data_summary$total_observations)
message("- Unique species: ", data_summary$unique_species) 
message("- Biological replicates: ", data_summary$unique_bio_replicates)
message("- Growth measurements: ", data_summary$has_growth)
message("- E. coli measurements: ", data_summary$has_ecoli)
message("- Complete cases: ", data_summary$complete_cases)
```

# Results

## Growth Limits and Plate Coverage Analysis

```{r plate-coverage-analysis}
# Analyze plate coverage
coverage_summary <- exp_data %>%
  filter(species != "Control", !is.na(plate_coverage_14dpi)) %>%
  group_by(species) %>%
  summarise(
    n = n(),
    mean_coverage = mean(plate_coverage_14dpi, na.rm = TRUE),
    max_coverage = max(plate_coverage_14dpi, na.rm = TRUE),
    samples_full_coverage = sum(reached_full_coverage, na.rm = TRUE),
    percent_full_coverage = (samples_full_coverage / n) * 100,
    mean_initial_coverage = mean(plate_coverage_0dpi, na.rm = TRUE),
    .groups = "drop"
  ) %>%
  arrange(desc(mean_coverage))

# Display coverage summary for top performers
if(nrow(coverage_summary) > 0) {
  kable(
    coverage_summary %>%
      head(10) %>%
      mutate(across(where(is.numeric), ~ round(.x, 1))),
    caption = "**Table 2.** Plate coverage analysis showing species approaching growth limits",
    col.names = c("Species", "N", "Mean Coverage (%)", "Max Coverage (%)", 
                  "Samples at Full Coverage", "% Reaching Full Coverage", "Initial Coverage (%)")
  )
}

# Identify growth-limited species
growth_limited <- coverage_summary %>%
  filter(percent_full_coverage > 50)

if(nrow(growth_limited) > 0) {
  cat("\n### Species Reaching Growth Limits\n\n")
  cat("The following species frequently reached full plate coverage (>95% of 63.62 cm²), indicating their growth was limited by available space:\n\n")
  for(i in 1:nrow(growth_limited)) {
    cat("- **", growth_limited$species[i], "**: ", 
        round(growth_limited$percent_full_coverage[i], 0), 
        "% of samples reached full coverage\n", sep = "")
  }
  cat("\n*Note: Growth percentages for these species may underestimate their true growth potential.*\n")
}
```

```{r coverage-visualization, fig.height=6, fig.cap="**Figure 2.** Plate coverage distribution showing species approaching the maximum growth limit of 63.62 cm². Red dashed line indicates full plate coverage."}
if(nrow(coverage_summary) > 0) {
  # Create coverage plot
  coverage_plot_data <- exp_data %>%
    filter(species != "Control", !is.na(plate_coverage_14dpi)) %>%
    mutate(species_ordered = factor(species, levels = coverage_summary$species))
  
  ggplot(coverage_plot_data, aes(x = species_ordered, y = plate_coverage_14dpi)) +
    geom_boxplot(alpha = 0.7, fill = "lightblue") +
    geom_hline(yintercept = 95, color = "red", linetype = "dashed", size = 1) +
    annotate("text", x = 1, y = 97, label = "Full plate coverage limit", 
             hjust = 0, color = "red", size = 3) +
    coord_flip() +
    labs(x = "", y = "Plate Coverage at 14 DPI (%)",
         title = "Fungal Growth Plate Coverage",
         subtitle = "Maximum possible coverage = 100% (63.62 cm²)") +
    theme_minimal(base_size = 12) +
    scale_y_continuous(limits = c(0, 105), breaks = seq(0, 100, 20))
}
```

## Overview Dashboard

```{r results-overview, fig.height=8, fig.cap="**Figure 3.** Performance overview of all tested fungal species. (A) Growth performance across experiments. (B) E. coli reduction effectiveness. Species are ordered by mean performance."}
# Load experiment final data
exp_data <- read_csv(here("data/processed/experiment_final.csv"), show_col_types = FALSE) %>%
  mutate(
    experiment = case_when(
      experiment == "1_1" ~ "Experiment 1.1",
      experiment == "1_2" ~ "Experiment 1.2",
      TRUE ~ experiment
    ),
    species = ifelse(species == "ctrl", "Control", species)
  )

# Calculate percent change from growth data
exp_data <- exp_data %>%
  mutate(
    area_percent_change = growth_14dpi,
    e_coli_log_reduction = ifelse(!is.na(ecoli_conc_mean) & !is.na(ecoli_conc_14dpi) & ecoli_conc_mean > 0 & ecoli_conc_14dpi > 0,
                                  log10(ecoli_conc_mean) - log10(ecoli_conc_14dpi),
                                  NA_real_)
  )

# Prepare overview data
overview_growth <- exp_data %>%
  filter(species != "Control", !is.na(area_percent_change)) %>%
  group_by(species) %>%
  summarise(
    mean_growth = mean(area_percent_change, na.rm = TRUE),
    se_growth = sd(area_percent_change, na.rm = TRUE) / sqrt(n()),
    n = n(),
    .groups = "drop"
  ) %>%
  arrange(desc(mean_growth))

overview_ecoli <- exp_data %>%
  filter(species != "Control", !is.na(e_coli_log_reduction)) %>%
  group_by(species) %>%
  summarise(
    mean_reduction = mean(e_coli_log_reduction, na.rm = TRUE),
    se_reduction = sd(e_coli_log_reduction, na.rm = TRUE) / sqrt(n()),
    n = n(),
    .groups = "drop"
  ) %>%
  arrange(desc(mean_reduction))

# Create overview plots
p1 <- ggplot(overview_growth, aes(x = reorder(species, mean_growth), y = mean_growth)) +
  geom_col(fill = "forestgreen", alpha = 0.7) +
  geom_errorbar(aes(ymin = mean_growth - se_growth, ymax = mean_growth + se_growth),
                width = 0.2, alpha = 0.5) +
  coord_flip() +
  labs(x = "", y = "Mean Growth (%)", 
       subtitle = "(A) Fungal Growth Performance") +
  theme_minimal(base_size = 12) +
  theme(axis.text.y = element_text(size = 10))

if(nrow(overview_ecoli) > 0) {
  p2 <- ggplot(overview_ecoli, aes(x = reorder(species, mean_reduction), y = mean_reduction)) +
    geom_col(fill = "darkred", alpha = 0.7) +
    geom_errorbar(aes(ymin = mean_reduction - se_reduction, ymax = mean_reduction + se_reduction),
                  width = 0.2, alpha = 0.5) +
    coord_flip() +
    labs(x = "", y = "Mean Log Reduction", 
         subtitle = "(B) E. coli Reduction Effectiveness") +
    theme_minimal(base_size = 12) +
    theme(axis.text.y = element_text(size = 10))
  
  p1 / p2
} else {
  p1
}
```

## Data Overview

```{r data-summary}
# Check data availability
growth_data_check <- experiment_data %>%
  mutate(
    has_area_0 = !is.na(area_size_0dpi) & area_size_0dpi != "NA",
    has_area_7 = !is.na(area_size_7dpi) & area_size_7dpi != "NA", 
    has_area_14 = !is.na(area_size_14dpi) & area_size_14dpi != "NA",
    has_ecoli_initial = !is.na(ecoli_conc_mean) & ecoli_conc_mean != "NA",
    has_ecoli_final = !is.na(ecoli_conc_14dpi) & ecoli_conc_14dpi != "NA"
  )

# Growth data summary
growth_species_summary <- growth_data_check %>%
  filter(has_area_0, species != "ctrl") %>%
  group_by(species) %>%
  summarise(
    total_measurements = n(),
    has_7dpi = sum(has_area_7, na.rm = TRUE),
    has_14dpi = sum(has_area_14, na.rm = TRUE),
    biological_replicates = n_distinct(str_c(id_faeces, starting_date)),
    .groups = "drop"
  ) %>%
  arrange(desc(total_measurements))

kable(growth_species_summary,
      caption = "**Table 1.** Growth data availability by species",
      col.names = c("Species", "Total Measurements", "7 DPI Available", 
                    "14 DPI Available", "Biological Replicates"))

cat("\nSpecies with growth data:", nrow(growth_species_summary), "\n")
```

```{r ecoli-summary}
# E. coli data summary  
ecoli_species_summary <- growth_data_check %>%
  filter(has_ecoli_initial, has_ecoli_final, species != "ctrl") %>%
  group_by(species) %>%
  summarise(
    total_measurements = n(),
    biological_replicates = n_distinct(str_c(id_faeces, starting_date)),
    .groups = "drop"
  ) %>%
  arrange(desc(total_measurements))

kable(ecoli_species_summary,
      caption = "**Table 2.** E. coli data availability by species",
      col.names = c("Species", "Total Measurements", "Biological Replicates"))

cat("\nSpecies with E. coli data:", nrow(ecoli_species_summary), "\n")
```

## Fungal Growth Performance

```{r growth-data-preparation}
# Prepare growth data with proper validation and outlier detection
growth_data_wide <- experiment_data %>%
  filter(has_growth_data, species != "ctrl") %>%
  # Detect outliers using MAD for each measurement
  mutate(
    outlier_0dpi = detect_outliers(area_size_0dpi),
    outlier_7dpi = detect_outliers(area_size_7dpi), 
    outlier_14dpi = detect_outliers(area_size_14dpi),
    any_outlier = outlier_0dpi | outlier_7dpi | outlier_14dpi
  )

# Convert to long format for longitudinal analysis
growth_data_long <- growth_data_wide %>%
  select(species, bio_replicate_id, tech_replicate_id, 
         area_size_0dpi, area_size_7dpi, area_size_14dpi, any_outlier) %>%
  pivot_longer(
    cols = starts_with("area_size_"),
    names_to = "timepoint",
    values_to = "area_size",
    names_pattern = "area_size_(.*)dpi"
  ) %>%
  mutate(
    day = as.numeric(timepoint),
    area_size_log = log1p(area_size),  # log1p for zero handling
    timepoint_factor = factor(timepoint, levels = c("0", "7", "14"))
  ) %>%
  filter(!is.na(area_size)) %>%
  # Add biological replicate summary stats for power analysis
  group_by(species) %>%
  mutate(
    n_bio_reps = n_distinct(bio_replicate_id),
    n_measurements = n(),
    sufficient_power = n_bio_reps >= MIN_BIOLOGICAL_REPS & n_measurements >= MIN_OBSERVATIONS_PER_SPECIES
  ) %>%
  ungroup()

# Growth rate calculation (more robust than simple differences)
growth_rates <- growth_data_long %>%
  arrange(tech_replicate_id, day) %>%
  group_by(tech_replicate_id) %>%
  mutate(
    growth_rate = if_else(
      day > 0,
      (area_size - first(area_size)) / day,
      0
    ),
    relative_growth = if_else(
      day > 0 & first(area_size) > 0,
      (area_size - first(area_size)) / first(area_size),
      0
    )
  ) %>%
  ungroup()

# Summary statistics with robust measures
growth_summary_robust <- growth_rates %>%
  filter(day > 0) %>%
  group_by(species, day) %>%
  summarise(
    n_obs = n(),
    n_bio_reps = n_distinct(bio_replicate_id),
    
    # Central tendency and spread
    median_area = median(area_size, na.rm = TRUE),
    q25_area = quantile(area_size, 0.25, na.rm = TRUE),
    q75_area = quantile(area_size, 0.75, na.rm = TRUE),
    mean_area = mean(area_size, na.rm = TRUE),
    sd_area = sd(area_size, na.rm = TRUE),
    
    # Growth metrics
    median_growth_rate = median(growth_rate, na.rm = TRUE),
    mean_growth_rate = mean(growth_rate, na.rm = TRUE),
    se_growth_rate = sd(growth_rate, na.rm = TRUE) / sqrt(n()),
    
    # Quality indicators
    cv_area = sd_area / mean_area,  # coefficient of variation
    sufficient_power = first(sufficient_power),
    
    .groups = "drop"
  ) %>%
  arrange(day, desc(median_growth_rate))

kable(
  growth_summary_robust %>% 
    select(species, day, n_obs, n_bio_reps, median_area, mean_growth_rate, se_growth_rate, cv_area) %>%
    mutate(across(where(is.numeric), ~ round(.x, 3))),
  caption = "**Table 3.** Robust growth performance summary by species and timepoint",
  col.names = c("Species", "Day", "N obs", "Bio reps", "Median area (cm²)", 
                "Growth rate (cm²/day)", "SE", "CV")
)
```

```{r longitudinal-growth-visualization, fig.cap="**Figure 1.** Longitudinal fungal growth trajectories with uncertainty quantification. Individual trajectories shown as thin lines, robust means as thick lines with 95% confidence ribbons.", fig.height=10}

# Create comprehensive visualization
p1_trajectories <- growth_rates %>%
  filter(day <= 14) %>%
  ggplot(aes(x = day, y = area_size, color = species)) +
  
  # Individual trajectories (thin, transparent)
  geom_line(aes(group = tech_replicate_id), alpha = 0.3, size = 0.3) +
  geom_point(alpha = 0.4, size = 0.8) +
  
  # Robust trend lines with confidence ribbons
  geom_smooth(method = "loess", se = TRUE, alpha = 0.2, size = 1.2) +
  
  scale_color_viridis_d(name = "Species", option = "plasma") +
  scale_x_continuous(breaks = c(0, 7, 14), labels = c("0", "7", "14")) +
  scale_y_continuous(trans = "log1p", labels = scales::number_format(accuracy = 0.1)) +
  
  facet_wrap(~ species, scales = "free_y", ncol = 3) +
  
  theme_bw(base_size = 10) +
  theme(
    legend.position = "none",
    strip.text = element_text(size = 8, face = "bold"),
    axis.text.x = element_text(angle = 0)
  ) +
  labs(
    x = "Days post-inoculation",
    y = "Colony area (cm², log scale)",
    title = "Individual Growth Trajectories by Species",
    subtitle = "Each line represents one technical replicate"
  )

# Growth rate comparison
p2_rates <- growth_summary_robust %>%
  filter(day == 14 | (day == 7 & !species %in% unique(growth_summary_robust$species[growth_summary_robust$day == 14]))) %>%
  mutate(
    timepoint_label = str_c(day, " days"),
    species_reorder = reorder(species, mean_growth_rate)
  ) %>%
  ggplot(aes(x = species_reorder, y = mean_growth_rate, fill = sufficient_power)) +
  
  geom_col(alpha = 0.8) +
  geom_errorbar(
    aes(ymin = mean_growth_rate - se_growth_rate, 
        ymax = mean_growth_rate + se_growth_rate),
    width = 0.3, alpha = 0.8
  ) +
  
  geom_text(
    aes(label = str_c("n=", n_bio_reps, "/", n_obs)), 
    hjust = -0.1, size = 2.5
  ) +
  
  scale_fill_manual(
    values = c("TRUE" = "steelblue", "FALSE" = "orange"),
    name = "Statistical Power",
    labels = c("FALSE" = "Insufficient", "TRUE" = "Adequate")
  ) +
  
  coord_flip() +
  theme_bw(base_size = 10) +
  theme(
    legend.position = "bottom",
    axis.text.y = element_text(size = 8)
  ) +
  labs(
    x = "Fungal Species",
    y = "Growth Rate (cm²/day)",
    title = "Growth Rate Performance Ranking",
    subtitle = "Error bars: ±1 SE, Labels: bio replicates/total observations"
  )

# Combine plots
combined_growth <- p1_trajectories / p2_rates + plot_layout(heights = c(2, 1))
print(combined_growth)
```

```{r create-backward-compatible-variables}
# Create backward-compatible variables for inline R code
growth_viz_data <- growth_summary_robust %>%
  filter(day == 14 | (day == 7 & !species %in% unique(growth_summary_robust$species[growth_summary_robust$day == 14]))) %>%
  mutate(
    mean_growth = mean_growth_rate * day,  # approximate total growth
    timepoint = str_c(day, " DPI")
  ) %>%
  arrange(desc(mean_growth))

# Ensure we have data for inline code
if(nrow(growth_viz_data) == 0) {
  # Fallback to any available data
  growth_viz_data <- growth_summary_robust %>%
    slice_max(mean_growth_rate, n = 10) %>%
    mutate(
      mean_growth = mean_growth_rate * day,
      timepoint = str_c(day, " DPI")
    ) %>%
    arrange(desc(mean_growth))
}

# Create growth_summary_stats for backward compatibility
growth_summary_stats <- growth_summary_robust %>%
  group_by(species) %>%
  summarise(
    n = sum(n_obs),
    n_bio_reps = sum(n_bio_reps),
    .groups = "drop"
  )
```

**Key Findings - Growth Performance:**

```{r growth-key-findings, results='asis'}
if(exists("growth_viz_data") && nrow(growth_viz_data) >= 2) {
  cat("1. **Top Performers**:", growth_viz_data$species[1], "showed the highest growth (", 
      round(growth_viz_data$mean_growth[1], 1), "cm²), followed by", 
      growth_viz_data$species[2], "(", round(growth_viz_data$mean_growth[2], 1), "cm²).\n\n")
  
  cat("2. **Growth Range**: Growth performance varied dramatically from", 
      round(min(growth_viz_data$mean_growth), 1), "to", 
      round(max(growth_viz_data$mean_growth), 1), "cm², representing a", 
      round(max(growth_viz_data$mean_growth)/min(growth_viz_data$mean_growth), 1), 
      "-fold difference between species.\n\n")
  
  most_common_timepoint <- names(sort(table(growth_viz_data$timepoint), decreasing = TRUE))[1]
  n_at_timepoint <- sum(growth_viz_data$timepoint == most_common_timepoint)
  
  cat("3. **Measurement Timing**: Most species were measured at", most_common_timepoint, 
      ", with", n_at_timepoint, "species assessed at this timepoint.\n\n")
} else {
  cat("Growth performance analysis results not available with current dataset.\n\n")
}
```

## Longitudinal Mixed-Effects Analysis

### Power Analysis and Sample Size Assessment

```{r power-analysis}
# Assess statistical power for current design
power_assessment <- growth_summary_robust %>%
  filter(day == 14) %>%
  mutate(
    # Conservative effect size estimation (Cohen's f)
    estimated_effect_size = sd(mean_growth_rate, na.rm = TRUE) / mean(se_growth_rate, na.rm = TRUE),
    
    # Power calculation for ANOVA
    power_anova = map_dbl(n_bio_reps, ~ {
      if(.x >= 2) {
        tryCatch({
          pwr.anova.test(
            k = n_distinct(growth_summary_robust$species[growth_summary_robust$day == 14]),
            n = .x,
            f = 0.25,  # medium effect size
            sig.level = ALPHA_LEVEL
          )$power
        }, error = function(e) NA_real_)
      } else NA_real_
    })
  ) %>%
  select(species, n_bio_reps, n_obs, power_anova, sufficient_power)

kable(
  power_assessment %>% mutate(across(where(is.numeric), ~ round(.x, 3))),
  caption = "**Table 4.** Statistical power assessment for growth analysis",
  col.names = c("Species", "Bio Reps", "Total Obs", "Estimated Power", "Sufficient")
)

adequate_power_species <- power_assessment %>% filter(sufficient_power) %>% nrow()
cat("\nSpecies with adequate statistical power:", adequate_power_species, "/", nrow(power_assessment))
```

### Longitudinal Mixed-Effects Model

**Statistical Approach:**
We use linear mixed-effects models to properly account for:
- **Fixed effects**: Species and time effects
- **Random effects**: Biological replicate clustering
- **Repeated measures**: Multiple timepoints per experimental unit

```{r longitudinal-mixed-effects-modeling}
# Prepare data for longitudinal mixed-effects modeling
modeling_data <- growth_rates %>%
  filter(
    !any_outlier,  # Remove outliers
    day > 0,       # Exclude baseline (day 0) 
    !is.na(area_size),
    sufficient_power  # Only species with adequate power
  ) %>%
  mutate(
    # Center and scale predictors for numerical stability
    day_centered = scale(day, scale = FALSE)[,1],
    log_area_size = log1p(area_size),
    species = factor(species),
    species = fct_reorder(species, area_size, .fun = median, .desc = TRUE)
  )

cat("**Longitudinal Mixed-Effects Analysis Dataset:**\n")
cat("- Species included:", n_distinct(modeling_data$species), "\n")
cat("- Total observations:", nrow(modeling_data), "\n") 
cat("- Biological replicates:", n_distinct(modeling_data$bio_replicate_id), "\n")
cat("- Timepoints:", str_c(sort(unique(modeling_data$day)), collapse = ", "), "\n\n")

# Model fitting with progressive complexity
if(nrow(modeling_data) >= 10 && n_distinct(modeling_data$species) >= 2) {
  
  cat("### Model Development and Selection\n\n")
  
  # Model 1: Random intercepts only
  model1 <- lmer(log_area_size ~ species * day_centered + (1 | bio_replicate_id), 
                 data = modeling_data, REML = FALSE)
  
  # Model 2: Random slopes for time
  model2 <- tryCatch({
    lmer(log_area_size ~ species * day_centered + (day_centered | bio_replicate_id), 
         data = modeling_data, REML = FALSE)
  }, error = function(e) {
    message("Random slopes model failed to converge, using random intercepts only")
    NULL
  })
  
  # Model comparison
  if(!is.null(model2)) {
    model_comparison <- anova(model1, model2)
    best_model <- if(model_comparison$`Pr(>Chisq)`[2] < ALPHA_LEVEL) model2 else model1
    cat("**Model Selection:**\n")
    cat("- Random slopes significantly improve fit: ", 
        ifelse(!is.null(model2) && model_comparison$`Pr(>Chisq)`[2] < ALPHA_LEVEL, "Yes", "No"), "\n")
    cat("- Selected model: ", ifelse(identical(best_model, model2), "Random slopes", "Random intercepts"), "\n\n")
  } else {
    best_model <- model1
    cat("**Model Selection:**\n")
    cat("- Using random intercepts model (slopes model did not converge)\n\n")
  }
  
  # Refit with REML for final inference
  final_model <- update(best_model, REML = TRUE)
  
} else {
  cat("**Insufficient data for longitudinal mixed-effects modeling**\n")
  cat("Need adequate power species with sufficient replication\n\n")
  final_model <- NULL
}
```

```{r comprehensive-model-diagnostics}
if(!is.null(final_model)) {
  
  cat("### Comprehensive Model Diagnostics\n\n")
  
  # Variance components analysis
  var_comp <- as.data.frame(VarCorr(final_model))
  bio_var <- var_comp$vcov[var_comp$grp == "bio_replicate_id"][1]  # first element if matrix
  residual_var <- var_comp$vcov[var_comp$grp == "Residual"]
  total_var <- bio_var + residual_var
  icc <- bio_var / total_var
  
  cat("**Variance Decomposition:**\n")
  cat("- Between biological replicates: ", round(bio_var, 4), " (", round(100*bio_var/total_var, 1), "%)\n")
  cat("- Within biological replicates: ", round(residual_var, 4), " (", round(100*residual_var/total_var, 1), "%)\n")
  cat("- Intraclass Correlation (ICC): ", round(icc, 3), "\n\n")
  
  # Comprehensive model diagnostics using performance package
  model_performance <- performance::model_performance(final_model)
  cat("**Model Fit Statistics:**\n")
  cat("- AIC: ", round(model_performance$AIC, 1), "\n")
  cat("- BIC: ", round(model_performance$BIC, 1), "\n")
  cat("- Marginal R²: ", round(model_performance$R2_marginal, 3), " (fixed effects)\n")
  cat("- Conditional R²: ", round(model_performance$R2_conditional, 3), " (fixed + random)\n\n")
  
  # Residual diagnostics
  model_check <- performance::check_model(final_model, check = c("normality", "homogeneity", "outliers"))
  
  cat("**Assumption Checks:**\n")
  # Normality of residuals (more robust than Shapiro-Wilk)
  residuals_std <- residuals(final_model, scaled = TRUE)
  ad_test <- nortest::ad.test(residuals_std)
  cat("- Normality (Anderson-Darling): p = ", round(ad_test$p.value, 3),
      if(ad_test$p.value > 0.05) " ✓" else " ⚠", "\n")
  
  # Homoscedasticity (Breusch-Pagan test)
  bp_test <- tryCatch({
    car::ncvTest(lm(residuals_std ~ fitted(final_model)))
  }, error = function(e) list(p = NA))
  
  if(!is.na(bp_test$p)) {
    cat("- Homoscedasticity (Breusch-Pagan): p = ", round(bp_test$p, 3),
        if(bp_test$p > 0.05) " ✓" else " ⚠", "\n")
  }
  
  # Check for influential observations
  influence <- performance::check_outliers(final_model)
  n_outliers <- sum(influence, na.rm = TRUE)
  cat("- Influential observations: ", n_outliers, "/", nrow(modeling_data))
  if(n_outliers > 0.05 * nrow(modeling_data)) cat(" ⚠")
  cat("\n\n")
  
} else {
  cat("### Model Diagnostics Not Available\n")
  cat("Insufficient data for mixed-effects modeling\n\n")
}
```

```{r statistical-inference-and-effect-sizes}
if(!is.null(final_model)) {
  
  cat("### Statistical Inference and Effect Sizes\n\n")
  
  # Overall model significance
  anova_results <- anova(final_model)
  
  cat("**Analysis of Variance (Type III):**\n")
  anova_table <- anova_results %>%
    as_tibble(rownames = "Effect") %>%
    mutate(
      `F value` = round(`F value`, 2),
      `Pr(>F)` = case_when(
        `Pr(>F)` < 0.001 ~ "< 0.001",
        `Pr(>F)` < 0.01 ~ sprintf("%.3f", `Pr(>F)`),
        TRUE ~ sprintf("%.3f", `Pr(>F)`)
      ),
      Significance = case_when(
        as.numeric(gsub("<", "", `Pr(>F)`)) < 0.001 ~ "***",
        as.numeric(gsub("<", "", `Pr(>F)`)) < 0.01 ~ "**", 
        as.numeric(gsub("<", "", `Pr(>F)`)) < 0.05 ~ "*",
        TRUE ~ ""
      )
    )
  
  kable(anova_table,
        caption = "**Table 5.** Analysis of variance for longitudinal growth model")
  
  # Effect sizes (eta-squared)
  effect_sizes <- effectsize::eta_squared(final_model, partial = TRUE)
  
  cat("\n**Effect Sizes (Partial η²):**\n")
  for(i in 1:nrow(effect_sizes)) {
    effect_name <- effect_sizes$Parameter[i]
    eta_sq <- effect_sizes$Eta2_partial[i]
    interpretation <- interpret_effect_size(eta_sq)
    cat("- ", effect_name, ": η² = ", round(eta_sq, 3), " (", interpretation, ")\n")
  }
  cat("\n")
  
  # Estimated marginal means with proper multiple comparisons
  emm_species <- emmeans(final_model, ~ species)
  emm_time <- emmeans(final_model, ~ day_centered)
  
  # Species comparisons
  emm_species_summary <- summary(emm_species, type = "response") %>%
    as_tibble() %>%
    mutate(
      emmean_original = expm1(emmean),  # back-transform from log scale
      lower_original = expm1(lower.CL),
      upper_original = expm1(upper.CL),
      across(c(emmean_original, lower_original, upper_original), ~ round(.x, 2))
    ) %>%
    arrange(desc(emmean_original))
  
  kable(
    emm_species_summary %>% 
      select(species, emmean_original, SE, lower_original, upper_original),
    caption = "**Table 6.** Estimated marginal means for species (back-transformed to cm²)",
    col.names = c("Species", "Mean Area (cm²)", "SE", "95% CI Lower", "95% CI Upper")
  )
  
  # Pairwise comparisons with multiple comparisons adjustment
  pairwise_species <- pairs(emm_species, adjust = "holm")  # Holm method more powerful than Tukey
  pairwise_summary <- summary(pairwise_species)
  
  # Identify practically significant differences
  practically_significant <- pairwise_summary %>%
    filter(
      p.value < ALPHA_LEVEL,
      abs(estimate) >= log(1 + PRACTICAL_SIGNIFICANCE_GROWTH)  # on log scale
    )
  
  cat("\n**Pairwise Comparisons (Holm adjustment):**\n")
  cat("- Total comparisons: ", nrow(pairwise_summary), "\n")
  cat("- Statistically significant: ", sum(pairwise_summary$p.value < ALPHA_LEVEL), "\n") 
  cat("- Practically significant: ", nrow(practically_significant), "\n")
  cat("- Family-wise error rate controlled at α = ", ALPHA_LEVEL, "\n\n")
  
  if(nrow(practically_significant) > 0) {
    practical_table <- practically_significant %>%
      mutate(
        difference_cm2 = round(expm1(estimate) - 1, 2),  # approximate back-transform
        p.value = case_when(
          p.value < 0.001 ~ "< 0.001",
          TRUE ~ sprintf("%.3f", p.value)
        )
      ) %>%
      arrange(abs(estimate)) %>%
      select(contrast, difference_cm2, p.value)
    
    kable(
      practical_table,
      caption = "**Table 7.** Practically and statistically significant species differences",
      col.names = c("Comparison", "Difference (cm²)", "p-value")
    )
  }
  
} else {
  cat("### Statistical Analysis Not Available\n")
  cat("Insufficient data for robust statistical modeling\n\n")
  # Create placeholder variables for backward compatibility
  final_model <- NULL
}

# Create backward-compatible variables for mixed-effects results
if(!is.null(final_model)) {
  # Create growth_lmer for backward compatibility 
  growth_lmer <- final_model
  
  # Create emm_results from the actual model results  
  emm_species <- emmeans(final_model, ~ species)
  emm_results <- summary(emm_species) %>%
    as_tibble() %>%
    mutate(
      emmean_original = expm1(emmean),
      emmean = emmean_original,  # for backward compatibility
      SE = SE,
      lower.CL = expm1(lower.CL),
      upper.CL = expm1(upper.CL)
    ) %>%
    arrange(desc(emmean))
    
  icc <- bio_var / total_var
} else {
  growth_lmer <- NULL
  emm_results <- NULL
  icc <- NA
}
```

### Mixed-Effects Analysis Interpretation

```{r mixed-effects-interpretation}
if(exists("growth_lmer")) {
  cat("**Key Statistical Findings:**\n\n")
  
  # Best and worst performers
  best_species <- emm_results$species[1]
  worst_species <- emm_results$species[nrow(emm_results)]
  performance_range <- emm_results$emmean[1] - emm_results$emmean[nrow(emm_results)]
  
  cat("1. **Performance Range**: Growth varied from", round(emm_results$emmean[nrow(emm_results)], 1),
      "to", round(emm_results$emmean[1], 1), "cm² across species\n")
  cat("   - Best performer:", best_species, "(", round(emm_results$emmean[1], 2), "± ", 
      round(emm_results$SE[1], 2), "cm²)\n")
  cat("   - Poorest performer:", worst_species, "(", round(emm_results$emmean[nrow(emm_results)], 2), 
      "± ", round(emm_results$SE[nrow(emm_results)], 2), "cm²)\n")
  cat("   - Fold difference:", round(emm_results$emmean[1] / emm_results$emmean[nrow(emm_results)], 1), 
      "x between best and worst\n\n")
  
  cat("2. **Statistical Power**: With ICC =", round(icc, 2), ", this design provides", 
      if(icc > 0.3) "good statistical power for detecting species differences"
      else "moderate statistical power - consider increasing biological replication", "\n\n")
  
  cat("3. **Experimental Quality**: The", 
      if(icc > 0.5) "high ICC indicates excellent experimental control and measurement precision"
      else if(icc > 0.2) "moderate ICC suggests acceptable but improvable experimental precision"  
      else "low ICC indicates room for improvement in measurement consistency", "\n\n")
  
  # Confidence interval interpretation
  narrow_ci <- mean(emm_results$upper.CL - emm_results$lower.CL)
  cat("4. **Precision**: Average 95% confidence interval width is", round(narrow_ci, 1), 
      "cm², indicating", 
      if(narrow_ci < 2) "high precision in species estimates"
      else if(narrow_ci < 5) "moderate precision in species estimates"
      else "relatively wide uncertainty in species estimates", "\n\n")
}
```

## E. coli Reduction Effectiveness

```{r ecoli-data-preparation-robust}
# Robust E. coli data preparation with validation
ecoli_data_clean <- experiment_data %>%
  filter(has_ecoli_data) %>%
  mutate(
    # Handle potential zeros and negative values in log calculations
    ecoli_initial = pmax(1, as.numeric(ecoli_conc_mean)),  # minimum 1 CFU/g
    ecoli_final = pmax(0.1, as.numeric(ecoli_conc_14dpi)),  # minimum 0.1 CFU/g (detection limit)
    
    # Robust log reduction calculation
    log_reduction = log10(ecoli_initial / ecoli_final),
    log_initial = log10(ecoli_initial),
    log_final = log10(ecoli_final),
    
    # Additional metrics
    percent_reduction = pmax(0, pmin(100, (1 - ecoli_final/ecoli_initial) * 100)),
    fold_reduction = ecoli_initial / ecoli_final,
    
    # Quality flags
    below_detection = ecoli_final < 1,
    high_initial = ecoli_initial > quantile(ecoli_initial, 0.9, na.rm = TRUE),
    
    # Biological replicate info
    bio_replicate_id = str_c(species, id_faeces, starting_date, sep = "_"),
    
    # Outlier detection for E. coli data
    outlier_initial = detect_outliers(log_initial),
    outlier_final = detect_outliers(log_final),
    outlier_reduction = detect_outliers(log_reduction),
    any_ecoli_outlier = outlier_initial | outlier_final | outlier_reduction
  ) %>%
  # Add power assessment
  group_by(species) %>%
  mutate(
    n_bio_reps = n_distinct(bio_replicate_id),
    n_obs = n(),
    sufficient_ecoli_power = n_bio_reps >= MIN_BIOLOGICAL_REPS & n_obs >= MIN_OBSERVATIONS_PER_SPECIES
  ) %>%
  ungroup()

# Robust summary statistics
ecoli_summary_robust <- ecoli_data_clean %>%
  group_by(species) %>%
  summarise(
    n_obs = n(),
    n_bio_reps = n_distinct(bio_replicate_id),
    
    # Initial concentrations
    median_initial = median(ecoli_initial),
    q25_initial = quantile(ecoli_initial, 0.25),
    q75_initial = quantile(ecoli_initial, 0.75),
    
    # Final concentrations  
    median_final = median(ecoli_final),
    q25_final = quantile(ecoli_final, 0.25),
    q75_final = quantile(ecoli_final, 0.75),
    
    # Log reduction (primary outcome)
    median_log_reduction = median(log_reduction),
    mean_log_reduction = mean(log_reduction),
    sd_log_reduction = sd(log_reduction),
    se_log_reduction = sd_log_reduction / sqrt(n_obs),
    q25_log_reduction = quantile(log_reduction, 0.25),
    q75_log_reduction = quantile(log_reduction, 0.75),
    
    # Practical metrics
    mean_percent_reduction = mean(percent_reduction),
    median_fold_reduction = median(fold_reduction),
    
    # Quality indicators
    prop_below_detection = mean(below_detection),
    sufficient_power = first(sufficient_ecoli_power),
    cv_reduction = sd_log_reduction / abs(mean_log_reduction),  # coefficient of variation
    
    .groups = "drop"
  ) %>%
  arrange(desc(median_log_reduction))

kable(
  ecoli_summary_robust %>% 
    select(species, n_obs, n_bio_reps, median_log_reduction, q25_log_reduction, 
           q75_log_reduction, mean_percent_reduction, sufficient_power) %>%
    mutate(across(where(is.numeric), ~ round(.x, 2))),
  caption = "**Table 8.** Robust E. coli reduction effectiveness summary",
  col.names = c("Species", "N obs", "Bio reps", "Median log reduction", "Q25", "Q75", 
                "Mean % reduction", "Adequate power")
)

cat("\n**Data Quality Summary:**\n")
cat("- Species with E. coli data: ", n_distinct(ecoli_data_clean$species), "\n")
cat("- Total observations: ", nrow(ecoli_data_clean), "\n")
cat("- Biological replicates: ", n_distinct(ecoli_data_clean$bio_replicate_id), "\n")
cat("- Species with adequate power: ", sum(ecoli_summary_robust$sufficient_power), "\n")
cat("- Measurements below detection: ", round(100*mean(ecoli_data_clean$below_detection), 1), "%\n")
```

```{r ecoli-comprehensive-visualization, fig.cap="**Figure 2.** Comprehensive E. coli reduction analysis showing individual measurements, robust central tendencies, and control comparisons. Dotted line indicates clinically significant 2-log reduction threshold.", fig.height=12}

# Create comprehensive E. coli visualization
if(nrow(ecoli_data_clean) > 0) {
  
  # Individual data points with robust summary
  p1_individuals <- ecoli_data_clean %>%
    mutate(
      treatment_type = case_when(
        species == "ctrl" ~ "Control",
        TRUE ~ "Fungal Treatment"
      ),
      species_display = if_else(species == "ctrl", "Untreated Control", species),
      species_ordered = fct_reorder(species_display, log_reduction, median)
    ) %>%
    ggplot(aes(x = species_ordered, y = log_reduction)) +
    
    # Individual points
    geom_jitter(aes(color = treatment_type, shape = below_detection), 
                width = 0.2, alpha = 0.6, size = 2) +
    
    # Robust central tendency (median and IQR)
    stat_summary(
      fun.data = "median_hilow", 
      fun.args = list(conf.int = 0.5),  # IQR
      geom = "errorbar", 
      width = 0.3,
      size = 1.2,
      alpha = 0.8
    ) +
    stat_summary(
      fun = "median",
      geom = "point", 
      size = 3,
      shape = 21,
      fill = "white",
      stroke = 1.5
    ) +
    
    # Clinical significance threshold
    geom_hline(yintercept = 2, linetype = "dashed", color = "red", alpha = 0.7) +
    annotate("text", x = Inf, y = 2.1, label = "Clinical threshold (99% reduction)", 
             hjust = 1, color = "red", size = 3) +
    
    scale_color_manual(
      values = c("Control" = "gray50", "Fungal Treatment" = "steelblue"),
      name = "Treatment"
    ) +
    scale_shape_manual(
      values = c("TRUE" = 17, "FALSE" = 16),  # triangle for below detection
      name = "Below detection limit"
    ) +
    
    coord_flip() +
    theme_bw(base_size = 10) +
    theme(
      legend.position = "bottom",
      axis.text.y = element_text(size = 8)
    ) +
    labs(
      x = "Species/Treatment",
      y = "E. coli Log Reduction",
      title = "Individual E. coli Reduction Measurements",
      subtitle = "Points = individual measurements, error bars = IQR, filled circles = median"
    )
  
  # Effect size comparison with control
  if("ctrl" %in% ecoli_data_clean$species) {
    control_median <- ecoli_summary_robust %>% 
      filter(species == "ctrl") %>% 
      pull(median_log_reduction)
    
    p2_effect_sizes <- ecoli_summary_robust %>%
      filter(species != "ctrl") %>%
      mutate(
        effect_vs_control = median_log_reduction - control_median,
        species_ordered = fct_reorder(species, effect_vs_control),
        clinically_significant = median_log_reduction >= 2,
        practically_significant = effect_vs_control >= PRACTICAL_SIGNIFICANCE_ECOLI
      ) %>%
      ggplot(aes(x = species_ordered, y = effect_vs_control)) +
      
      geom_col(aes(fill = practically_significant), alpha = 0.8) +
      geom_errorbar(
        aes(ymin = effect_vs_control - se_log_reduction,
            ymax = effect_vs_control + se_log_reduction),
        width = 0.3
      ) +
      
      geom_hline(yintercept = 0, linetype = "solid", alpha = 0.5) +
      geom_hline(yintercept = PRACTICAL_SIGNIFICANCE_ECOLI, 
                 linetype = "dashed", color = "darkgreen") +
      
      geom_text(
        aes(label = str_c("n=", n_bio_reps, "/", n_obs)),
        hjust = -0.1, size = 2.5
      ) +
      
      scale_fill_manual(
        values = c("TRUE" = "darkgreen", "FALSE" = "orange"),
        name = "Practically significant",
        labels = c("FALSE" = "No", "TRUE" = "Yes")
      ) +
      
      coord_flip() +
      theme_bw(base_size = 10) +
      theme(legend.position = "bottom") +
      labs(
        x = "Fungal Species", 
        y = "Additional Log Reduction vs Control",
        title = "Treatment Effect Sizes Relative to Control",
        subtitle = "Dashed line = practical significance threshold"
      )
    
    combined_ecoli <- p1_individuals / p2_effect_sizes + 
      plot_layout(heights = c(2, 1))
    
  } else {
    combined_ecoli <- p1_individuals
  }
  
  print(combined_ecoli)
  
} else {
  cat("No E. coli data available for visualization.\n")
}
```

### Robust Statistical Analysis for E. coli Reduction

```{r ecoli-statistical-modeling}
# Prepare E. coli data for statistical modeling
ecoli_modeling_data <- ecoli_data_clean %>%
  filter(
    species != "ctrl",
    !any_ecoli_outlier,
    sufficient_ecoli_power
  ) %>%
  mutate(
    species = factor(species),
    species = fct_reorder(species, log_reduction, median, .desc = TRUE)
  )

cat("**E. coli Statistical Analysis Dataset:**\n")
cat("- Species included: ", n_distinct(ecoli_modeling_data$species), "\n")
cat("- Total observations: ", nrow(ecoli_modeling_data), "\n")
cat("- Biological replicates: ", n_distinct(ecoli_modeling_data$bio_replicate_id), "\n")

if(nrow(ecoli_modeling_data) >= 6 && n_distinct(ecoli_modeling_data$species) >= 2) {
  
  cat("- Proceeding with mixed-effects analysis\n\n")
  
  # Fit E. coli mixed-effects model
  ecoli_model <- lmer(log_reduction ~ species + (1|bio_replicate_id), 
                      data = ecoli_modeling_data)
  
  # Model diagnostics for E. coli
  cat("**E. coli Model Diagnostics:**\n")
  
  # Variance decomposition
  var_comp_ecoli <- as.data.frame(VarCorr(ecoli_model))
  bio_var_ecoli <- var_comp_ecoli$vcov[var_comp_ecoli$grp == "bio_replicate_id"]
  residual_var_ecoli <- var_comp_ecoli$vcov[var_comp_ecoli$grp == "Residual"]
  total_var_ecoli <- bio_var_ecoli + residual_var_ecoli
  icc_ecoli <- bio_var_ecoli / total_var_ecoli
  
  cat("- Biological replicate variance: ", round(bio_var_ecoli, 4), 
      " (", round(100*bio_var_ecoli/total_var_ecoli, 1), "%)\n")
  cat("- Technical variance: ", round(residual_var_ecoli, 4), 
      " (", round(100*residual_var_ecoli/total_var_ecoli, 1), "%)\n")
  cat("- ICC: ", round(icc_ecoli, 3), "\n\n")
  
  # Model performance
  ecoli_performance <- performance::model_performance(ecoli_model)
  cat("- Marginal R²: ", round(ecoli_performance$R2_marginal, 3), " (species effects)\n")
  cat("- Conditional R²: ", round(ecoli_performance$R2_conditional, 3), " (total model)\n\n")
  
  # ANOVA results
  anova_ecoli <- anova(ecoli_model)
  ecoli_p <- anova_ecoli$`Pr(>F)`[1]
  
  cat("**Overall Species Effect:**\n")
  cat("- F(", anova_ecoli$NumDF[1], ",", round(anova_ecoli$DenDF[1], 1), ") = ", 
      round(anova_ecoli$`F value`[1], 2), ", p = ", format.pval(ecoli_p), "\n")
  
  if(ecoli_p < 0.05) {
    cat("- Significant differences in antimicrobial effectiveness between species\n\n")
    
    # Effect size
    ecoli_effect_size <- effectsize::eta_squared(ecoli_model, partial = TRUE)
    eta_sq_ecoli <- ecoli_effect_size$Eta2_partial[1]
    cat("- Effect size (partial η²): ", round(eta_sq_ecoli, 3), 
        " (", interpret_effect_size(eta_sq_ecoli), ")\n\n")
    
    # Estimated marginal means
    emm_ecoli <- emmeans(ecoli_model, ~ species)
    emm_ecoli_summary <- summary(emm_ecoli) %>%
      as_tibble() %>%
      arrange(desc(emmean))
    
    kable(
      emm_ecoli_summary %>% 
        mutate(across(where(is.numeric), ~ round(.x, 3))) %>%
        select(species, emmean, SE, lower.CL, upper.CL),
      caption = "**Table 9.** Estimated marginal means for E. coli log reduction",
      col.names = c("Species", "Mean Log Reduction", "SE", "95% CI Lower", "95% CI Upper")
    )
    
    # Pairwise comparisons with practical significance
    pairwise_ecoli <- pairs(emm_ecoli, adjust = "holm")
    pairwise_ecoli_summary <- summary(pairwise_ecoli)
    
    # Filter for practically significant differences
    practical_ecoli <- pairwise_ecoli_summary %>%
      filter(
        p.value < ALPHA_LEVEL,
        abs(estimate) >= PRACTICAL_SIGNIFICANCE_ECOLI
      ) %>%
      mutate(
        p.value = case_when(
          p.value < 0.001 ~ "< 0.001",
          TRUE ~ sprintf("%.3f", p.value)
        ),
        estimate = round(estimate, 3)
      ) %>%
      arrange(desc(abs(estimate)))
    
    cat("\n**Pairwise Comparisons (Holm adjustment):**\n")
    cat("- Total comparisons: ", nrow(pairwise_ecoli_summary), "\n")
    cat("- Statistically significant: ", sum(pairwise_ecoli_summary$p.value < ALPHA_LEVEL), "\n")
    cat("- Practically significant: ", nrow(practical_ecoli), "\n\n")
    
    if(nrow(practical_ecoli) > 0) {
      kable(
        practical_ecoli %>% select(contrast, estimate, p.value),
        caption = "**Table 10.** Practically and statistically significant E. coli differences",
        col.names = c("Comparison", "Difference (log units)", "p-value")
      )
    } else {
      cat("No practically significant pairwise differences detected\n")
    }
    
  } else {
    cat("- No significant differences in antimicrobial effectiveness detected\n\n")
  }
  
} else {
  cat("- Insufficient data for mixed-effects analysis\n")
  cat("- Using descriptive statistics only\n\n")
  
  # Descriptive analysis when insufficient power
  if(nrow(ecoli_data_clean) > 0) {
    cat("**Descriptive E. coli Results:**\n")
    
    best_species <- ecoli_summary_robust %>% 
      filter(species != "ctrl") %>% 
      slice_max(median_log_reduction, n = 1)
    
    clinically_effective <- ecoli_summary_robust %>%
      filter(species != "ctrl", median_log_reduction >= 2) %>%
      nrow()
    
    cat("- Best performer: ", best_species$species, 
        " (", round(best_species$median_log_reduction, 2), " log reduction)\n")
    cat("- Clinically effective species (≥2 log): ", clinically_effective, "/", 
        nrow(ecoli_summary_robust %>% filter(species != "ctrl")), "\n")
    
    if("ctrl" %in% ecoli_summary_robust$species) {
      control_performance <- ecoli_summary_robust %>% filter(species == "ctrl")
      better_than_control <- ecoli_summary_robust %>%
        filter(species != "ctrl", median_log_reduction > control_performance$median_log_reduction) %>%
        nrow()
      
      cat("- Control performance: ", round(control_performance$median_log_reduction, 2), " log reduction\n")
      cat("- Species outperforming control: ", better_than_control, "/", 
          nrow(ecoli_summary_robust %>% filter(species != "ctrl")), "\n")
    }
  }
}
```

**Key Findings - E. coli Reduction:**

```{r ecoli-key-findings}
# Calculate key findings dynamically
if(exists("ecoli_viz_with_ctrl") && nrow(ecoli_viz_with_ctrl) > 0) {
  control_data <- ecoli_summary %>% filter(species == "ctrl")
  treatment_data <- ecoli_summary %>% filter(species != "ctrl")
  
  if(nrow(treatment_data) > 0) {
    best_treatment <- treatment_data %>% slice_max(mean_log_reduction, n = 1)
    better_than_control <- if(nrow(control_data) > 0) {
      sum(treatment_data$mean_log_reduction > control_data$mean_log_reduction)
    } else { NA }
    clinically_significant <- sum(treatment_data$mean_log_reduction >= 2)
    
    cat("1. **Treatment Effectiveness**: The most effective fungal treatment (", 
        best_treatment$species, ") achieved", round(best_treatment$mean_log_reduction, 2), 
        "log reduction in E. coli concentration\n\n")
    
    if(nrow(control_data) > 0) {
      improvement <- round(best_treatment$mean_log_reduction - control_data$mean_log_reduction, 2)
      cat("2. **Control Comparison**: Fungal treatment provided", improvement, 
          "additional log reduction compared to untreated control (", 
          round(control_data$mean_log_reduction, 2), "log reduction)\n\n")
      
      cat("3. **Treatment Success**: ", better_than_control, "out of", nrow(treatment_data), 
          "fungal treatments outperformed the untreated control\n\n")
    }
    
    cat("4. **Clinical Significance**: Log reductions ≥2.0 represent 99% bacterial elimination, achieved by", 
        clinically_significant, "species\n\n")
    
    cat("5. **Treatment Range**: E. coli reduction varied from", 
        round(min(treatment_data$mean_log_reduction), 2), "to", 
        round(max(treatment_data$mean_log_reduction), 2), "log units across fungal species")
  } else {
    cat("Limited treatment data available for E. coli analysis")
  }
} else {
  cat("Limited E. coli data available for comprehensive analysis")
}
```

```{r create-ecoli-backward-compatible-variables}
# Create backward-compatible E. coli variables for inline R code
ecoli_viz <- ecoli_summary_robust %>% 
  filter(species != "ctrl") %>%
  mutate(mean_log_reduction = median_log_reduction) %>%
  select(-median_log_reduction) %>%  # remove the original column to avoid duplication
  arrange(desc(mean_log_reduction))

# For the visualization with control
ecoli_viz_with_ctrl <- ecoli_summary_robust %>%
  mutate(
    treatment_type = ifelse(species == "ctrl", "Control", "Fungal Treatment"),
    species_display = ifelse(species == "ctrl", "Untreated Control", species),
    mean_log_reduction = median_log_reduction,
    n = n_obs
  ) %>%
  arrange(desc(mean_log_reduction))

# Create ecoli_summary for backward compatibility  
ecoli_summary <- ecoli_summary_robust %>%
  mutate(
    mean_log_reduction = median_log_reduction,
    n = n_obs
  ) %>%
  select(species, n, n_bio_reps, mean_log_reduction, se_log_reduction, mean_percent_reduction)
```

## pH Changes Analysis

### pH Changes from 0 to 14 DPI

```{r ph-data-preparation}
# Prepare pH change data
ph_data <- experiment_data %>%
  filter(!is.na(ph_0dpi) & !is.na(ph_14dpi)) %>%
  mutate(
    # pH change from baseline (ph_0dpi) to 14 dpi
    ph_change = ph_14dpi - ph_0dpi,
    
    # Species grouping
    species = ifelse(species == "ctrl", "Control", species)
  )

# Summary statistics for pH changes
ph_summary <- ph_data %>%
  group_by(species) %>%
  summarise(
    n_ph = n(),
    baseline_ph_mean = mean(ph_0dpi, na.rm = TRUE),
    baseline_ph_sd = sd(ph_0dpi, na.rm = TRUE),
    ph_14dpi_mean = mean(ph_14dpi, na.rm = TRUE),
    ph_14dpi_sd = sd(ph_14dpi, na.rm = TRUE),
    ph_change_mean = mean(ph_change, na.rm = TRUE),
    ph_change_sd = sd(ph_change, na.rm = TRUE),
    .groups = "drop"
  ) %>%
  arrange(desc(ph_change_mean))


# Display summary table
if(nrow(ph_summary) > 0) {
  kable(
    ph_summary %>%
      select(species, n_ph, baseline_ph_mean, ph_14dpi_mean, ph_change_mean, ph_change_sd) %>%
      mutate(across(where(is.numeric), ~ round(.x, 2))),
    caption = "**Table 11.** pH changes from baseline to 14 days post-inoculation",
    col.names = c("Species", "N", "Baseline pH", "14 DPI pH", "Mean Change", "SD Change")
  )
} else {
  cat("No pH data available for analysis.\n")
}
```

```{r ph-visualization, fig.cap="**Figure 3.** pH changes over 14 days of fungal treatment", fig.height=6}
# Create visualization only if data exists  
if(nrow(ph_summary) > 0) {
  # pH change visualization
  p_ph <- ph_data %>%
      mutate(species_ordered = factor(species, levels = ph_summary$species)) %>%
      ggplot(aes(x = species_ordered)) +
      
      # Baseline and 14 DPI points connected by lines
      geom_point(aes(y = ph_0dpi, color = "Baseline"), size = 2, alpha = 0.6) +
      geom_point(aes(y = ph_14dpi, color = "14 DPI"), size = 2, alpha = 0.6) +
      geom_segment(aes(xend = species_ordered, y = ph_0dpi, yend = ph_14dpi),
                   alpha = 0.3, color = "gray50") +
      
      # Mean values with error bars
      geom_pointrange(data = ph_summary %>%
                        mutate(species_ordered = factor(species, levels = ph_summary$species)),
                      aes(x = species_ordered,
                          y = baseline_ph_mean, 
                          ymin = baseline_ph_mean - baseline_ph_sd,
                          ymax = baseline_ph_mean + baseline_ph_sd,
                          color = "Baseline"),
                      position = position_nudge(x = -0.1),
                      size = 0.8, fatten = 3) +
      geom_pointrange(data = ph_summary %>%
                        mutate(species_ordered = factor(species, levels = ph_summary$species)),
                      aes(x = species_ordered,
                          y = ph_14dpi_mean,
                          ymin = ph_14dpi_mean - ph_14dpi_sd,
                          ymax = ph_14dpi_mean + ph_14dpi_sd,
                          color = "14 DPI"),
                      position = position_nudge(x = 0.1),
                      size = 0.8, fatten = 3) +
      
      scale_color_manual(values = c("Baseline" = "steelblue", "14 DPI" = "darkred"),
                         name = "Timepoint") +
      
      coord_flip() +
      theme_bw(base_size = 10) +
      theme(legend.position = "bottom") +
      labs(x = "Species", y = "pH Value",
           title = "pH Changes During Treatment",
           subtitle = "Individual measurements and means ± SD")
  
  print(p_ph)
  
} else {
  cat("No pH data available for visualization.\n")
}
```

### Statistical Analysis of pH Changes

```{r ph-statistical-analysis}
# Statistical tests for pH changes
if(nrow(ph_summary) > 1) {
  cat("**pH Change Analysis:**\n\n")
  
  # Test if pH changes are significantly different from zero
  ph_change_test <- ph_data %>%
    group_by(species) %>%
    summarise(
      n = n(),
      mean_change = mean(ph_change, na.rm = TRUE),
      sd_change = sd(ph_change, na.rm = TRUE),
      se_change = ifelse(n > 1, sd_change / sqrt(n), NA_real_),
      t_stat = ifelse(!is.na(se_change) & se_change > 0, mean_change / se_change, NA_real_),
      p_value = ifelse(!is.na(t_stat) & n > 1, 2 * pt(abs(t_stat), df = n - 1, lower.tail = FALSE), NA_real_),
      significant = !is.na(p_value) & p_value < 0.05,
      .groups = "drop"
    )
  
  significant_ph_changes <- sum(ph_change_test$significant)
  
  cat("- Species showing significant pH changes:", significant_ph_changes, "out of", 
      nrow(ph_change_test), "\n")
  
  if(significant_ph_changes > 0) {
    cat("- Species with significant pH changes:\n")
    ph_change_test %>%
      filter(significant) %>%
      arrange(p_value) %>%
      mutate(
        direction = ifelse(mean_change > 0, "increased", "decreased"),
        p_display = ifelse(p_value < 0.001, "< 0.001", sprintf("%.3f", p_value))
      ) %>%
      select(species, mean_change, direction, p_display) %>%
      kable(col.names = c("Species", "Mean Change", "Direction", "p-value")) %>%
      print()
  }
  
  # Test for differences between species
  if(nrow(ph_data) >= 10) {
    ph_anova <- aov(ph_change ~ species, data = ph_data)
    ph_anova_summary <- summary(ph_anova)
    
    cat("\n**Between-species pH change comparison:**\n")
    cat("- F-statistic:", round(ph_anova_summary[[1]]$`F value`[1], 2), "\n")
    cat("- p-value:", format.pval(ph_anova_summary[[1]]$`Pr(>F)`[1]), "\n")
  }
}
```

### Key Findings - pH Changes

```{r ph-key-findings}
# Generate key findings based on the data
cat("**Environmental Parameter Changes:**\n\n")

if(nrow(ph_summary) > 0) {
  largest_ph_increase <- ph_summary %>% slice_max(ph_change_mean, n = 1)
  largest_ph_decrease <- ph_summary %>% slice_min(ph_change_mean, n = 1)
  
  cat("1. **pH Dynamics**:\n")
  cat("   - Largest pH increase:", largest_ph_increase$species, 
      "(+", round(largest_ph_increase$ph_change_mean, 2), "units)\n")
  cat("   - Largest pH decrease:", largest_ph_decrease$species,
      "(", round(largest_ph_decrease$ph_change_mean, 2), "units)\n")
  cat("   - Overall pH range at 14 DPI:", 
      round(min(ph_summary$ph_14dpi_mean), 1), "to",
      round(max(ph_summary$ph_14dpi_mean), 1), "\n\n")
}

cat("2. **Metabolic Implications**:\n")
alkaline_species <- sum(ph_summary$ph_change_mean > 0.5, na.rm = TRUE)
acidic_species <- sum(ph_summary$ph_change_mean < -0.5, na.rm = TRUE)

if(alkaline_species > 0) {
  cat("   -", alkaline_species, "species alkalinized the substrate (pH increase > 0.5)\n")
}
if(acidic_species > 0) {
  cat("   -", acidic_species, "species acidified the substrate (pH decrease > 0.5)\n")
}
cat("   - pH changes indicate active microbial metabolism and substrate modification\n")
```

## Comprehensive Weight Analysis

### Weight Changes from 0 to 14 DPI

```{r weight-data-preparation}
# Prepare comprehensive weight data
weight_data <- experiment_data %>%
  filter(!is.na(weight_0dpi) | !is.na(weight_14dpi)) %>%
  mutate(
    # Calculate wet weight changes
    wet_weight_change = weight_14dpi - weight_0dpi,
    wet_weight_percent_change = (wet_weight_change / weight_0dpi) * 100,
    
    # Flag data availability
    has_wet_weight_data = !is.na(weight_0dpi) & !is.na(weight_14dpi),
    has_dry_weight_data = if("dry_weight_0dpi" %in% names(.)) {
      !is.na(dry_weight_0dpi) & !is.na(dry_weight_14dpi)
    } else {
      FALSE
    },
    
    # Calculate water loss if dry weight data exists
    water_loss = if("dry_weight_0dpi" %in% names(.)) {
      (wet_weight_change - dry_weight_change)
    } else {
      NA_real_
    },
    water_loss_percent = if("dry_weight_0dpi" %in% names(.)) {
      (water_loss / weight_0dpi) * 100
    } else {
      NA_real_
    },
    
    # Species grouping
    species = ifelse(species == "ctrl", "Control", species)
  )

# Summary statistics for weight changes
weight_summary <- weight_data %>%
  filter(has_wet_weight_data) %>%
  group_by(species) %>%
  summarise(
    n = n(),
    # Wet weight statistics
    wet_weight_0dpi_mean = mean(weight_0dpi, na.rm = TRUE),
    wet_weight_0dpi_sd = sd(weight_0dpi, na.rm = TRUE),
    wet_weight_14dpi_mean = mean(weight_14dpi, na.rm = TRUE),
    wet_weight_14dpi_sd = sd(weight_14dpi, na.rm = TRUE),
    wet_weight_change_mean = mean(wet_weight_change, na.rm = TRUE),
    wet_weight_change_sd = sd(wet_weight_change, na.rm = TRUE),
    wet_weight_percent_change_mean = mean(wet_weight_percent_change, na.rm = TRUE),
    wet_weight_percent_change_sd = sd(wet_weight_percent_change, na.rm = TRUE),
    # Dry weight statistics if available
    dry_weight_0dpi_mean = if("dry_weight_0dpi" %in% names(weight_data)) mean(dry_weight_0dpi, na.rm = TRUE) else NA_real_,
    dry_weight_0dpi_sd = if("dry_weight_0dpi" %in% names(weight_data)) sd(dry_weight_0dpi, na.rm = TRUE) else NA_real_,
    dry_weight_14dpi_mean = if("dry_weight_14dpi" %in% names(weight_data)) mean(dry_weight_14dpi, na.rm = TRUE) else NA_real_,
    dry_weight_14dpi_sd = if("dry_weight_14dpi" %in% names(weight_data)) sd(dry_weight_14dpi, na.rm = TRUE) else NA_real_,
    dry_weight_change_mean = if("dry_weight_change" %in% names(weight_data)) mean(dry_weight_change, na.rm = TRUE) else NA_real_,
    dry_weight_change_sd = if("dry_weight_change" %in% names(weight_data)) sd(dry_weight_change, na.rm = TRUE) else NA_real_,
    dry_weight_percent_change_mean = if("dry_weight_percent_change" %in% names(weight_data)) mean(dry_weight_percent_change, na.rm = TRUE) else NA_real_,
    dry_weight_percent_change_sd = if("dry_weight_percent_change" %in% names(weight_data)) sd(dry_weight_percent_change, na.rm = TRUE) else NA_real_,
    # Water loss statistics
    water_loss_mean = if("water_loss" %in% names(weight_data)) mean(water_loss, na.rm = TRUE) else NA_real_,
    water_loss_percent_mean = if("water_loss_percent" %in% names(weight_data)) mean(water_loss_percent, na.rm = TRUE) else NA_real_,
    .groups = "drop"
  ) %>%
  arrange(desc(wet_weight_percent_change_mean))

# Display comprehensive weight summary table
if(nrow(weight_summary) > 0) {
  # Check if dry weight data is available
  has_dry_weight <- !all(is.na(weight_summary$dry_weight_0dpi_mean))
  
  if(has_dry_weight) {
    # Full table with wet and dry weights
    kable(
      weight_summary %>%
        select(species, n, 
               wet_weight_0dpi_mean, wet_weight_14dpi_mean, wet_weight_percent_change_mean,
               dry_weight_0dpi_mean, dry_weight_14dpi_mean, dry_weight_percent_change_mean,
               water_loss_percent_mean) %>%
        mutate(across(where(is.numeric), ~ round(.x, 2))),
      caption = "**Table 12.** Comprehensive weight changes from 0 to 14 days post-inoculation",
      col.names = c("Species", "N", 
                    "Initial Wet (g)", "Final Wet (g)", "Wet Change (%)",
                    "Initial Dry (g)", "Final Dry (g)", "Dry Change (%)",
                    "Water Loss (%)")
    )
  } else {
    # Table with only wet weights
    kable(
      weight_summary %>%
        select(species, n, wet_weight_0dpi_mean, wet_weight_14dpi_mean, 
               wet_weight_change_mean, wet_weight_percent_change_mean) %>%
        mutate(across(where(is.numeric), ~ round(.x, 2))),
      caption = "**Table 12.** Wet weight changes from 0 to 14 days post-inoculation",
      col.names = c("Species", "N", "Initial Weight (g)", "Final Weight (g)", 
                    "Mean Change (g)", "Mean % Change")
    )
    cat("\nNote: Dry weight analysis requires re-running the data cleaning script.\n")
  }
} else {
  cat("No weight data available for analysis.\n")
}
```

```{r weight-visualization, fig.cap="**Figure 4.** Comprehensive weight changes over 14 days of fungal treatment. (A) Wet and dry weight percent changes. (B) Decomposition of weight loss into water loss and organic matter loss.", fig.height=10}
# Create visualizations only if data exists
if(nrow(weight_summary) > 0) {
  has_dry_weight <- !all(is.na(weight_summary$dry_weight_0dpi_mean))
  
  if(has_dry_weight) {
    # Create comparison data for wet vs dry weight changes
    comparison_data <- weight_summary %>%
      select(species, wet_weight_percent_change_mean, dry_weight_percent_change_mean, water_loss_percent_mean) %>%
      pivot_longer(cols = c(wet_weight_percent_change_mean, dry_weight_percent_change_mean),
                   names_to = "weight_type",
                   values_to = "percent_change") %>%
      mutate(
        weight_type = case_when(
          weight_type == "wet_weight_percent_change_mean" ~ "Wet Weight",
          weight_type == "dry_weight_percent_change_mean" ~ "Dry Weight"
        ),
        species_ordered = factor(species, levels = weight_summary$species)
      )
    
    # Plot 1: Wet vs Dry weight percent changes
    p_comparison <- ggplot(comparison_data, aes(x = species_ordered, y = percent_change, fill = weight_type)) +
      geom_col(position = position_dodge(width = 0.8), width = 0.7, alpha = 0.8) +
      geom_hline(yintercept = 0, linetype = "solid", alpha = 0.5) +
      scale_fill_manual(values = c("Wet Weight" = "#4E79A7", "Dry Weight" = "#E15759"),
                        name = "Weight Type") +
      coord_flip() +
      theme_minimal() +
      theme(axis.text.y = element_text(size = 10),
            legend.position = "top") +
      labs(x = "Species", y = "Weight Change (%)",
           title = "Wet vs Dry Weight Changes",
           subtitle = "Comparing total weight loss with organic matter decomposition")
    
    # Plot 2: Decomposition of weight loss
    decomposition_data <- weight_summary %>%
      select(species, dry_weight_percent_change_mean, water_loss_percent_mean) %>%
      mutate(species_ordered = factor(species, levels = weight_summary$species)) %>%
      pivot_longer(cols = c(dry_weight_percent_change_mean, water_loss_percent_mean),
                   names_to = "loss_type",
                   values_to = "percent_loss") %>%
      mutate(
        loss_type = case_when(
          loss_type == "dry_weight_percent_change_mean" ~ "Organic Matter",
          loss_type == "water_loss_percent_mean" ~ "Water"
        )
      )
    
    p_decomposition <- ggplot(decomposition_data, aes(x = species_ordered, y = percent_loss, fill = loss_type)) +
      geom_col(position = "stack", width = 0.7, alpha = 0.8) +
      scale_fill_manual(values = c("Organic Matter" = "#F28E2B", "Water" = "#76B7B2"),
                        name = "Loss Type") +
      coord_flip() +
      theme_minimal() +
      theme(axis.text.y = element_text(size = 10),
            legend.position = "top") +
      labs(x = "Species", y = "Contribution to Total Weight Loss (%)",
           title = "Decomposition of Weight Loss",
           subtitle = "Water loss vs organic matter decomposition")
    
    # Combine plots
    library(patchwork)
    combined_weight <- p_comparison / p_decomposition
    print(combined_weight)
    
  } else {
    # Simple wet weight visualization if no dry weight data
    p_wet <- weight_data %>%
      filter(has_wet_weight_data) %>%
      mutate(species_ordered = factor(species, levels = weight_summary$species)) %>%
      ggplot(aes(x = species_ordered, y = wet_weight_percent_change)) +
      
      # Individual observations
      geom_jitter(width = 0.2, alpha = 0.6, size = 2, color = "gray50") +
      
      # Mean with error bars
      geom_point(data = weight_summary %>%
                   mutate(species_ordered = factor(species, levels = weight_summary$species)),
                 aes(y = wet_weight_percent_change_mean),
                 size = 3, color = "#4E79A7") +
      geom_errorbar(data = weight_summary %>%
                      mutate(species_ordered = factor(species, levels = weight_summary$species)),
                    aes(y = wet_weight_percent_change_mean,
                        ymin = wet_weight_percent_change_mean - wet_weight_percent_change_sd,
                        ymax = wet_weight_percent_change_mean + wet_weight_percent_change_sd),
                    width = 0.3, color = "#4E79A7", linewidth = 1) +
      
      # Reference line at 0
      geom_hline(yintercept = 0, linetype = "dashed", alpha = 0.5) +
      
      coord_flip() +
      theme_minimal() +
      theme(axis.text.y = element_text(size = 10)) +
      labs(x = "Species", y = "Wet Weight Change (%)",
           title = "Wet Weight Changes After 14 Days",
           subtitle = "Individual observations and means ± SD")
    
    print(p_wet)
    cat("\nNote: Comprehensive weight analysis with dry weights requires re-running the data cleaning script.\n")
  }
  
} else {
  cat("Insufficient data for weight visualization.\n")
}
```

### Statistical Analysis of Weight Changes

```{r weight-statistical-analysis}
# Statistical tests for dry weight changes
if(exists("dry_weight_summary") && nrow(dry_weight_summary) > 1) {
  cat("**Dry Weight Change Analysis:**\n\n")
  
  # Test if dry weight changes are significantly different from zero for each species
  dry_weight_change_test <- dry_weight_data %>%
    filter(has_dry_weight_data) %>%
    group_by(species) %>%
    summarise(
      n = n(),
      mean_change = mean(dry_weight_change, na.rm = TRUE),
      sd_change = sd(dry_weight_change, na.rm = TRUE),
      se_change = if_else(n > 1, sd_change / sqrt(n), NA_real_),
      t_stat = if_else(!is.na(se_change) & se_change > 0, mean_change / se_change, NA_real_),
      p_value = if_else(!is.na(t_stat) & n > 1, 2 * pt(abs(t_stat), df = n - 1, lower.tail = FALSE), NA_real_),
      significant = if_else(!is.na(p_value), p_value < 0.05, FALSE),
      .groups = "drop"
    )
  
  significant_dry_weight_changes <- sum(dry_weight_change_test$significant, na.rm = TRUE)
  
  cat("- Species showing significant dry weight changes:", significant_dry_weight_changes, "out of", 
      nrow(dry_weight_change_test), "\n")
  
  if(!is.na(significant_dry_weight_changes) && significant_dry_weight_changes > 0) {
    cat("- Species with significant dry weight changes:\n")
    dry_weight_change_test %>%
      filter(significant) %>%
      select(species, mean_change, p_value) %>%
      mutate(
        mean_change = round(mean_change, 3),
        p_value = format.pval(p_value, digits = 3)
      ) %>%
      kable()
  }
  
  # ANOVA for between-species comparison
  if(nrow(dry_weight_data %>% filter(has_dry_weight_data)) >= 10) {
    dry_weight_anova <- aov(dry_weight_percent_change ~ species, 
                           data = dry_weight_data %>% filter(has_dry_weight_data))
    dry_weight_anova_summary <- summary(dry_weight_anova)
    
    cat("\n**Between-species dry weight change comparison:**\n")
    cat("- F-statistic:", round(dry_weight_anova_summary[[1]]$`F value`[1], 2), "\n")
    cat("- p-value:", format.pval(dry_weight_anova_summary[[1]]$`Pr(>F)`[1]), "\n")
  }
}
```

### Key Findings - Dry Weight Changes

```{r dry-weight-key-findings}
cat("**Summary of Dry Weight Analysis:**\n\n")

if(exists("dry_weight_summary") && nrow(dry_weight_summary) > 0) {
  largest_dry_weight_loss <- dry_weight_summary %>% slice_min(dry_weight_percent_change_mean, n = 1)
  smallest_dry_weight_loss <- dry_weight_summary %>% slice_max(dry_weight_percent_change_mean, n = 1)
  
  cat("1. **Dry Weight Dynamics**:\n")
  cat("   - Largest dry weight loss:", largest_dry_weight_loss$species, 
      "(", round(largest_dry_weight_loss$dry_weight_percent_change_mean, 1), "%)\n")
  cat("   - Smallest dry weight loss:", smallest_dry_weight_loss$species,
      "(", round(smallest_dry_weight_loss$dry_weight_percent_change_mean, 1), "%)\n")
  cat("   - Average dry weight change across all species:",
      round(mean(dry_weight_summary$dry_weight_percent_change_mean), 1), "%\n\n")
  
  cat("2. **Decomposition Efficiency**:\n")
  # Species with >20% dry weight loss
  high_decomposers <- dry_weight_summary %>% 
    filter(dry_weight_percent_change_mean < -20) %>%
    nrow()
  
  if(high_decomposers > 0) {
    cat("   -", high_decomposers, "species achieved >20% dry weight reduction\n")
  }
  
  cat("   - Dry weight loss directly reflects organic matter decomposition\n")
  cat("   - Greater losses indicate more efficient substrate utilization\n")
} else {
  cat("Dry weight data not available. Please re-run the data cleaning script (R/data_cleaning_new.R) to generate dry weight calculations.\n")
}
```

## Integrated Performance Assessment

```{r integrated-analysis}
# Combine growth and E. coli data where both are available
# Use the growth summary data and E. coli summary data

# Growth data for integration - use the best available measurement per species
growth_for_integration <- growth_summary_robust %>%
  group_by(species) %>%
  summarise(
    best_growth = max(mean_area, na.rm = TRUE),  # Use the best area measurement
    .groups = "drop"
  ) %>%
  filter(!is.na(best_growth), is.finite(best_growth))

# E. coli data for integration
ecoli_for_integration <- ecoli_summary_robust %>%
  filter(species != "ctrl") %>%
  select(species, mean_log_reduction) %>%
  filter(!is.na(mean_log_reduction))

# Check for overlap
integrated_data <- inner_join(growth_for_integration, ecoli_for_integration, by = "species")

if(nrow(integrated_data) > 0) {
  # Create performance scores (0-1 scale)
  integrated_performance <- integrated_data %>%
    mutate(
      growth_score = (best_growth - min(best_growth)) / 
                     (max(best_growth) - min(best_growth)),
      antimicrobial_score = (mean_log_reduction - min(mean_log_reduction)) / 
                           (max(mean_log_reduction) - min(mean_log_reduction)),
      combined_score = (growth_score + antimicrobial_score) / 2
    ) %>%
    arrange(desc(combined_score))
  
  kable(integrated_performance %>%
          select(species, best_growth, mean_log_reduction, combined_score) %>%
          mutate(across(c(best_growth, mean_log_reduction, combined_score), round, 2)),
        caption = "**Table 5.** Integrated performance ranking",
        col.names = c("Species", "Growth (cm²)", "E. coli Log Reduction", "Combined Score"))
  
  cat("\n**Integrated Performance Results:**\n")
  cat("Species with both growth and antimicrobial data:", nrow(integrated_performance), "\n")
  cat("Top integrated performer:", integrated_performance$species[1], "\n")
} else {
  cat("**No species have both growth and E. coli data for integrated analysis.**\n")
  cat("This indicates limited experimental overlap between growth and antimicrobial studies.\n")
}
```

# Discussion

## Key Findings Summary

### Growth Performance
- **Species diversity**: `r nrow(growth_summary_stats)` species showed measurable growth on fecal substrate
- **Performance range**: Growth varied by `r round(max(growth_viz_data$mean_growth, na.rm = TRUE)/min(growth_viz_data$mean_growth, na.rm = TRUE), 1)`-fold between best and worst performers
- **Top growth species**: `r str_c(growth_viz_data$species[1:min(3, nrow(growth_viz_data))], collapse = ", ")` showed superior faecal colonization potential

### Antimicrobial Effectiveness

```{r discussion-antimicrobial}
# Generate discussion points based on actual data
control_data <- ecoli_summary %>% filter(species == "ctrl")
treatment_data <- ecoli_summary %>% filter(species != "ctrl")

if(nrow(treatment_data) > 0) {
  effective_treatments <- sum(treatment_data$mean_log_reduction >= 1, na.rm = TRUE)
  top_species <- treatment_data %>% arrange(desc(mean_log_reduction)) %>% slice(1:min(2, nrow(treatment_data)))
  
  cat("- **Pathogen reduction**:", nrow(treatment_data), "fungal species demonstrated measurable E. coli reduction\n")
  cat("- **Effective treatments**:", effective_treatments, "species achieved ≥1 log (90%) bacterial reduction\n")
  cat("- **Top antimicrobial species**:", str_c(top_species$species, collapse = ", "), "\n")
  
  if(nrow(control_data) > 0) {
    better_than_control <- sum(treatment_data$mean_log_reduction > control_data$mean_log_reduction)
    cat("- **Treatment benefit**: ", better_than_control, " out of ", nrow(treatment_data), 
        " treatments outperformed untreated control (", 
        round(control_data$mean_log_reduction, 2), " log reduction)\n")
    
    if(better_than_control > 0) {
      best_improvement <- max(treatment_data$mean_log_reduction - control_data$mean_log_reduction)
      cat("- **Maximum benefit**: Up to", round(best_improvement, 2), 
          "additional log reduction compared to natural die-off\n")
    }
  }
} else {
  cat("- **Limited antimicrobial data**: Expanded species screening needed for E. coli reduction assessment\n")
}
```

### Environmental Parameters

```{r discussion-environmental}
# Generate discussion points for pH and weight changes
if(exists("ph_summary") && nrow(ph_summary) > 0) {
  cat("- **pH modification**: ", nrow(ph_summary), " species showed measurable pH changes during treatment\n")
  
  ph_range <- range(ph_summary$ph_change_mean, na.rm = TRUE)
  cat("- **pH change range**: From ", round(ph_range[1], 2), " to ", 
      round(ph_range[2], 2), " units, indicating diverse metabolic strategies\n")
  
  alkaline_species <- sum(ph_summary$ph_change_mean > 0.5, na.rm = TRUE)
  acidic_species <- sum(ph_summary$ph_change_mean < -0.5, na.rm = TRUE)
  
  if(alkaline_species > 0) {
    cat("- **Alkalinization**: ", alkaline_species, " species increased pH, potentially through ammonia production\n")
  }
  if(acidic_species > 0) {
    cat("- **Acidification**: ", acidic_species, " species decreased pH, suggesting organic acid production\n")
  }
}

if(exists("weight_summary") && nrow(weight_summary) > 0) {
  cat("\n")
  cat("- **Decomposition rates**: Weight loss ranged from ", 
      round(min(weight_summary$weight_change_percent_mean), 1), "% to ",
      round(max(weight_summary$weight_change_percent_mean), 1), "%\n")
  
  avg_weight_loss <- mean(weight_summary$weight_change_percent_mean)
  cat("- **Average weight reduction**: ", round(abs(avg_weight_loss), 1), 
      "% over 14 days, indicating active decomposition\n")
  
  high_decomposers <- sum(weight_summary$weight_change_percent_mean < -20, na.rm = TRUE)
  if(high_decomposers > 0) {
    cat("- **Rapid decomposers**: ", high_decomposers, " species achieved >20% weight reduction\n")
  }
}

# Generate discussion points for dry weight changes
if(exists("dry_weight_summary") && nrow(dry_weight_summary) > 0) {
  cat("\n")
  cat("- **Dry weight reduction**: More accurate measure of organic matter decomposition\n")
  
  dry_weight_range <- range(dry_weight_summary$dry_weight_percent_change_mean, na.rm = TRUE)
  cat("- **Dry weight loss range**: From ", round(dry_weight_range[1], 1), "% to ",
      round(dry_weight_range[2], 1), "%, excluding water loss effects\n")
  
  avg_dry_weight_loss <- mean(dry_weight_summary$dry_weight_percent_change_mean)
  cat("- **Average dry matter reduction**: ", round(abs(avg_dry_weight_loss), 1), 
      "%, representing true substrate utilization\n")
  
  efficient_decomposers <- sum(dry_weight_summary$dry_weight_percent_change_mean < -25, na.rm = TRUE)
  if(efficient_decomposers > 0) {
    cat("- **Highly efficient decomposers**: ", efficient_decomposers, 
        " species achieved >25% dry matter reduction\n")
  }
}
```

### Statistical Methodology Impact

```{r discussion-mixed-effects}
# Discuss mixed-effects results if available
if(exists("growth_lmer")) {
  cat("**Mixed-Effects Model Contributions:**\n\n")
  
  cat("The mixed-effects analysis provides several key advantages over traditional statistical approaches:\n\n")
  
  cat("1. **Proper Error Structure**: By modeling biological replicates as random effects, we account for the fact that technical replicates from the same biological source are more similar to each other than to replicates from different sources\n\n")
  
  icc_interpretation <- if(icc > 0.5) {
    str_c("indicates that most variation (", round(icc*100, 1), "%) comes from genuine biological differences between replicates, suggesting excellent experimental precision")
  } else if(icc > 0.2) {
    str_c("shows that ", round(icc*100, 1), "% of variation comes from biological differences, with the remainder from technical factors")
  } else {
    str_c("reveals that only ", round(icc*100, 1), "% of variation comes from biological differences, indicating substantial technical noise")
  }
  
  cat("2. **Variance Decomposition**: The ICC of", round(icc, 3), icc_interpretation, "\n\n")
  
  cat("3. **Accurate Inference**: The mixed-effects approach provides more conservative (and thus more reliable) p-values and confidence intervals compared to treating all measurements as independent\n\n")
  
  cat("4. **Effect Size Quantification**: Estimated marginal means provide the best estimates of true species performance, accounting for the experimental design:\n")
  
  # Show top 3 species with confidence intervals
  top_3 <- emm_results[1:min(3, nrow(emm_results)), ]
  for(i in 1:nrow(top_3)) {
    cat("   -", top_3$species[i], ":", round(top_3$emmean[i], 1), "cm² [95% CI:", 
        round(top_3$lower.CL[i], 1), "-", round(top_3$upper.CL[i], 1), "]\n")
  }
  cat("\n")
  
  if(exists("ecoli_lmer")) {
    ecoli_icc_interpretation <- if(icc_ecoli > 0.5) {
      "high consistency in antimicrobial measurements"
    } else {
      "moderate consistency with room for improvement in measurement precision"
    }
    
    cat("5. **Antimicrobial Analysis**: Mixed-effects modeling of E. coli reduction data shows ICC =", 
        round(icc_ecoli, 3), ", indicating", ecoli_icc_interpretation, "\n\n")
  }
  
} else {
  cat("**Statistical Limitations:**\n\n")
  cat("The absence of mixed-effects analysis due to insufficient replication highlights important limitations:\n\n")
  cat("1. **Pseudo-replication Risk**: Without proper accounting for technical vs biological replication, statistical conclusions may be overstated\n")
  cat("2. **Design Recommendations**: Future studies should ensure multiple biological replicates per species (minimum 3-4) with adequate technical replication\n")
  cat("3. **Power Analysis**: Current sample sizes may be insufficient for detecting meaningful differences between species\n\n")
}

# Discuss implications for experimental design
cat("**Experimental Design Implications:**\n\n")
cat("For future studies, we recommend:\n")
cat("- **Biological replicates**: Minimum 4-5 per species for adequate power\n")
cat("- **Technical replicates**: 2-3 per biological replicate for precision assessment\n")
cat("- **Balanced design**: Equal replication across species where possible\n")
cat("- **Power analysis**: Pre-study calculations to determine adequate sample sizes\n\n")
```

## Practical Implications

### Species Selection Recommendations

**For Rapid Decomposition Applications:**
- Primary recommendation: `r growth_viz_data$species[1]` (highest growth rate)
- Alternative options: `r str_c(growth_viz_data$species[2:min(3, nrow(growth_viz_data))], collapse = ", ")`

`r if(nrow(ecoli_viz) > 0) str_c("**For Pathogen Reduction Applications:**\n- Primary recommendation: ", ecoli_viz$species[1], " (highest E. coli reduction)\n- Clinical threshold: Species achieving ≥2 log reduction suitable for pathogen control") else "**For Pathogen Reduction Applications:**\n- Additional studies needed with broader species panel\n- Current data insufficient for pathogen reduction recommendations"`

`r if(exists("integrated_performance") && nrow(integrated_performance) > 0) str_c("**For Combined Applications:**\n- Balanced performance: ", integrated_performance$species[1], " (highest combined score)\n- Dual-purpose treatment systems should prioritize species with both capabilities") else "**For Combined Applications:**\n- Sequential treatment approach recommended\n- Use high-growth species for decomposition, then high-antimicrobial species for pathogen control"`

## Limitations and Future Research Priorities

### Current Study Limitations
1. **Data coverage**: Limited overlap between growth and antimicrobial measurements
2. **Pathogen scope**: Only E. coli tested as bacterial indicator
3. **Time scale**: Growth assessed only to 14 days maximum
4. **Environmental conditions**: Laboratory conditions may not reflect field applications

### Immediate Research Needs (Next 6-12 months)
1. **Comprehensive species screening**: Test all species for both growth and antimicrobial effectiveness
2. **Broader pathogen panel**: Include additional bacterial indicators, viruses, and parasites
3. **Optimization studies**: Determine optimal inoculum concentrations, temperature, and moisture conditions
4. **Longer-term studies**: Extended monitoring to assess treatment stability and completion

### Medium-term Development (1-3 years)
1. **Field validation**: Pilot-scale studies under realistic conditions
2. **Treatment system design**: Engineering of practical treatment facilities
3. **Economic analysis**: Cost-effectiveness assessment compared to conventional methods
4. **Safety evaluation**: Comprehensive assessment of treated material safety

### Long-term Applications (3-5 years)
1. **Regulatory approval**: Development of treatment standards and guidelines
2. **Technology transfer**: Implementation in target communities and regions
3. **Integration studies**: Combination with other waste treatment technologies
4. **Strain improvement**: Optimization of fungal strains for enhanced performance

# Experiment 1_2 Analysis

## Overview

```{r exp2-overview-metrics}
# Load experiment final data if not already loaded
if(!exists("exp_data")) {
  exp_data <- read_csv(here("data/processed/experiment_final.csv"), show_col_types = FALSE) %>%
    mutate(
      experiment = case_when(
        experiment == "1_1" ~ "Experiment 1.1",
        experiment == "1_2" ~ "Experiment 1.2",
        TRUE ~ experiment
      ),
      species = ifelse(species == "ctrl", "Control", species),
      area_percent_change = growth_14dpi,
      e_coli_log_reduction = ifelse(!is.na(ecoli_conc_mean) & !is.na(ecoli_conc_14dpi) & ecoli_conc_mean > 0 & ecoli_conc_14dpi > 0,
                                    log10(ecoli_conc_mean) - log10(ecoli_conc_14dpi),
                                    NA_real_)
    )
}

# Calculate comprehensive metrics for Experiment 1_2
exp2_metrics <- exp_data %>%
  filter(experiment == "Experiment 1.2") %>%
  summarise(
    total_samples = n(),
    fungal_species = n_distinct(species[species != "Control"]),
    control_samples = sum(species == "Control"),
    
    # Growth metrics
    growth_samples = sum(!is.na(area_percent_change)),
    mean_growth_all = mean(area_percent_change, na.rm = TRUE),
    median_growth_all = median(area_percent_change, na.rm = TRUE),
    
    # E. coli metrics
    ecoli_samples = sum(!is.na(e_coli_log_reduction)),
    mean_ecoli_reduction = mean(e_coli_log_reduction, na.rm = TRUE),
    species_with_ecoli = n_distinct(species[!is.na(e_coli_log_reduction)]),
    
    # Weight metrics
    weight_samples = sum(!is.na(weight_14dpi)),
    mean_weight_loss = mean((weight_0dpi - weight_14dpi) / weight_0dpi * 100, na.rm = TRUE),
    
    # pH metrics
    ph_samples = sum(!is.na(ph_14dpi)),
    mean_ph_change = mean(ph_14dpi - ph_0dpi, na.rm = TRUE)
  )

# Species-level summary
exp2_species_summary <- exp_data %>%
  filter(experiment == "Experiment 1.2", species != "Control") %>%
  group_by(species) %>%
  summarise(
    n = n(),
    growth = mean(area_percent_change, na.rm = TRUE),
    growth_sd = sd(area_percent_change, na.rm = TRUE),
    ecoli_reduction = mean(e_coli_log_reduction, na.rm = TRUE),
    weight_loss = mean((weight_0dpi - weight_14dpi) / weight_0dpi * 100, na.rm = TRUE),
    ph_change = mean(ph_14dpi - ph_0dpi, na.rm = TRUE),
    .groups = "drop"
  ) %>%
  arrange(desc(growth))
```

### Experiment 1.2 Key Metrics

- **Total Samples**: `r exp2_metrics$total_samples` (including `r exp2_metrics$control_samples` controls)
- **Fungal Species Tested**: `r exp2_metrics$fungal_species`
- **Mean Growth**: `r round(exp2_metrics$mean_growth_all, 1)`% (median: `r round(exp2_metrics$median_growth_all, 1)`%)
- **E. coli Data Available**: `r exp2_metrics$ecoli_samples` samples from `r exp2_metrics$species_with_ecoli` species
- **Weight Loss Data**: `r exp2_metrics$weight_samples` samples (mean loss: `r round(exp2_metrics$mean_weight_loss, 1)`%)
- **pH Change**: `r round(exp2_metrics$mean_ph_change, 2)` units average increase

### Performance Summary Table

```{r exp2-summary-table}
if(exists("exp2_species_summary") && nrow(exp2_species_summary) > 0) {
  kable(
    exp2_species_summary %>%
      select(species, n, growth, ecoli_reduction, weight_loss, ph_change) %>%
      mutate(across(where(is.numeric), ~ round(.x, 2))),
    caption = "**Table X.** Experiment 1.2 comprehensive species performance metrics",
    col.names = c("Species", "N", "Growth (%)", "E.coli Log Red.", "Weight Loss (%)", "pH Change")
  )
}
```

This section presents the analysis of the second experiment (1_2), which follows the same methodology as experiment 1_1 to validate findings and assess reproducibility.

```{r exp2-data-import}
# Filter data for experiment 1_2
experiment_2_data <- experiment_data_raw %>%
  filter(experiment == "1_2") %>%
  # Apply same data cleaning as experiment 1_1
  mutate(
    # Handle area size columns
    area_size_0dpi = suppressWarnings(as.numeric(area_size_0dpi)),
    area_size_7dpi = suppressWarnings(as.numeric(area_size_7dpi)),
    area_size_14dpi = suppressWarnings(as.numeric(area_size_14dpi)),
    
    # Handle E. coli columns  
    ecoli_conc_mean = suppressWarnings(as.numeric(ecoli_conc_mean)),
    ecoli_conc_14dpi = suppressWarnings(as.numeric(ecoli_conc_14dpi)),
    
    # Create standardized identifiers
    bio_replicate_id = paste(species, id_faeces, starting_date, sep = "_"),
    tech_replicate_id = paste(bio_replicate_id, id_treatment, sep = "_"),
    
    # Clean and standardize species names
    species = trimws(species),
    species = ifelse(is.na(species) | species == "", "unknown", species),
    
    # Use same species standardization as experiment 1_1
    species_standardized = case_when(
      str_detect(species, "T\\. harzianum T22") ~ "T. harzianum T22",
      str_detect(species, "T\\. harzianum CBS245.93") ~ "T. harzianum CBS245.93",
      species == "F33 Sordaria" ~ "F33 Sordaria",
      species == "F35 Sordaria" ~ "F35 Sordaria", 
      str_detect(species, "T\\. atroviridae") ~ "T. atroviridae", 
      str_detect(species, "T\\. virens") ~ "T. virens",
      str_detect(species, "T\\. gamsii") ~ "T. gamsii",
      str_detect(species, "T\\. koningii") ~ "T. koningii",
      str_detect(species, "T\\. veluntinum") ~ "T. veluntinum",
      str_detect(species, "P\\. ostreatus") ~ "P. ostreatus",
      str_detect(species, "C\\. comatus") ~ "C. comatus",
      str_detect(species, "Mucor") ~ "Mucor spp",
      str_detect(species, "Faecal isolate") ~ "Faecal isolate",
      str_detect(species, "Panaeolous") ~ "Panaeolous spp",
      str_detect(species, "F37 Mold") ~ "F37 Mold",
      str_detect(species, "F39 Thermo tolerant") ~ "F39 Thermotolerant",
      species == "ctrl" ~ "ctrl",
      TRUE ~ species
    ),
    
    species = species_standardized
  ) %>%
  filter(!(is.na(area_size_0dpi) & is.na(area_size_7dpi) & is.na(area_size_14dpi) & 
           is.na(ecoli_conc_mean) & is.na(ecoli_conc_14dpi)))

# Summary of experiment 2 data
exp2_summary <- experiment_2_data %>%
  filter(species != "ctrl") %>%
  group_by(species) %>%
  summarise(
    n_samples = n(),
    biological_replicates = n_distinct(str_c(id_faeces, starting_date)),
    has_growth_data = sum(!is.na(area_size_0dpi) & !is.na(area_size_14dpi)),
    has_ecoli_data = sum(!is.na(ecoli_conc_mean) & !is.na(ecoli_conc_14dpi)),
    .groups = "drop"
  ) %>%
  arrange(desc(n_samples))

kable(exp2_summary,
      caption = "**Table X.** Experiment 1_2 data availability by species",
      col.names = c("Species", "Total Samples", "Biological Replicates", 
                    "Growth Data", "E. coli Data"))
```

## Growth Performance Comparison

```{r exp2-growth-analysis}
# Prepare growth data for experiment 2
exp2_growth_data <- experiment_2_data %>%
  filter(!is.na(area_size_0dpi), !is.na(area_size_14dpi), species != "ctrl") %>%
  mutate(
    growth_14dpi = area_size_14dpi - area_size_0dpi,
    growth_percent = (growth_14dpi / area_size_0dpi) * 100
  ) %>%
  group_by(species) %>%
  summarise(
    n = n(),
    mean_growth = mean(growth_14dpi, na.rm = TRUE),
    se_growth = sd(growth_14dpi, na.rm = TRUE) / sqrt(n()),
    mean_growth_percent = mean(growth_percent, na.rm = TRUE),
    se_growth_percent = sd(growth_percent, na.rm = TRUE) / sqrt(n()),
    .groups = "drop"
  ) %>%
  filter(n >= 3) %>%
  arrange(desc(mean_growth))

# Create growth comparison plot
p_exp2_growth <- ggplot(exp2_growth_data, aes(x = reorder(species, mean_growth), y = mean_growth)) +
  geom_col(fill = "darkgreen", alpha = 0.7) +
  geom_errorbar(aes(ymin = mean_growth - se_growth, ymax = mean_growth + se_growth),
                width = 0.2) +
  coord_flip() +
  labs(x = "Species", y = "Growth (cm²)",
       title = "Experiment 1_2: Fungal Growth Performance at 14 DPI",
       subtitle = paste("n =", sum(exp2_growth_data$n), "samples from", 
                       nrow(exp2_growth_data), "species")) +
  theme_minimal() +
  theme(axis.text.y = element_text(face = "italic"))

print(p_exp2_growth)

# Top performers in experiment 2
top_exp2_species <- exp2_growth_data %>%
  slice_head(n = 5) %>%
  select(species, mean_growth, mean_growth_percent)

kable(top_exp2_species,
      caption = "**Table Y.** Top 5 performing species in Experiment 1_2",
      col.names = c("Species", "Mean Growth (cm²)", "Mean Growth (%)"),
      digits = 1)
```

## E. coli Reduction Analysis

```{r exp2-ecoli-analysis}
# Prepare E. coli data for experiment 2
exp2_ecoli_data <- experiment_2_data %>%
  filter(!is.na(ecoli_conc_mean), !is.na(ecoli_conc_14dpi), 
         species != "ctrl", ecoli_conc_mean > 0, ecoli_conc_14dpi > 0) %>%
  mutate(
    log_ecoli_initial = log10(ecoli_conc_mean),
    log_ecoli_final = log10(ecoli_conc_14dpi),
    log_reduction = log_ecoli_initial - log_ecoli_final,
    percent_reduction = ((ecoli_conc_mean - ecoli_conc_14dpi) / ecoli_conc_mean) * 100
  ) %>%
  group_by(species) %>%
  summarise(
    n = n(),
    mean_log_reduction = mean(log_reduction, na.rm = TRUE),
    se_log_reduction = sd(log_reduction, na.rm = TRUE) / sqrt(n()),
    mean_percent_reduction = mean(percent_reduction, na.rm = TRUE),
    .groups = "drop"
  ) %>%
  filter(n >= 3) %>%
  arrange(desc(mean_log_reduction))

if(nrow(exp2_ecoli_data) > 0) {
  # Create E. coli reduction plot
  p_exp2_ecoli <- ggplot(exp2_ecoli_data, aes(x = reorder(species, mean_log_reduction), 
                                               y = mean_log_reduction)) +
    geom_col(fill = "darkred", alpha = 0.7) +
    geom_errorbar(aes(ymin = mean_log_reduction - se_log_reduction, 
                      ymax = mean_log_reduction + se_log_reduction),
                  width = 0.2) +
    coord_flip() +
    labs(x = "Species", y = "Log Reduction",
         title = "Experiment 1_2: E. coli Reduction at 13 DPI",
         subtitle = paste("n =", sum(exp2_ecoli_data$n), "samples from", 
                         nrow(exp2_ecoli_data), "species")) +
    theme_minimal() +
    theme(axis.text.y = element_text(face = "italic"))
  
  print(p_exp2_ecoli)
  
  kable(exp2_ecoli_data,
        caption = "**Table Z.** E. coli reduction by species in Experiment 1_2",
        col.names = c("Species", "n", "Mean Log Reduction", "SE", "Mean % Reduction"),
        digits = 2)
} else {
  cat("Insufficient E. coli data available for Experiment 1_2 analysis\n")
}
```

## Comparison Between Experiments

```{r exp-comparison}
# Compare top performers between experiments
if(exists("growth_viz_data") && nrow(exp2_growth_data) > 0) {
  # Get top 5 from each experiment
  top_exp1 <- growth_viz_data %>%
    slice_head(n = 5) %>%
    select(species, exp1_growth = mean_growth)
  
  top_exp2 <- exp2_growth_data %>%
    slice_head(n = 5) %>%
    select(species, exp2_growth = mean_growth)
  
  # Create comparison
  comparison <- full_join(top_exp1, top_exp2, by = "species") %>%
    mutate(
      exp1_growth = round(exp1_growth, 1),
      exp2_growth = round(exp2_growth, 1),
      consistency = case_when(
        !is.na(exp1_growth) & !is.na(exp2_growth) ~ "Both experiments",
        !is.na(exp1_growth) ~ "Experiment 1 only",
        !is.na(exp2_growth) ~ "Experiment 2 only"
      )
    )
  
  kable(comparison,
        caption = "**Table AA.** Comparison of top performing species between experiments",
        col.names = c("Species", "Exp 1_1 Growth (cm²)", "Exp 1_2 Growth (cm²)", "Presence"))
  
  # Calculate correlation if there are common species
  common_species <- inner_join(
    growth_viz_data %>% select(species, exp1_growth = mean_growth),
    exp2_growth_data %>% select(species, exp2_growth = mean_growth),
    by = "species"
  )
  
  if(nrow(common_species) >= 3) {
    correlation <- cor.test(common_species$exp1_growth, common_species$exp2_growth)
    cat("\nCorrelation between experiments for common species: r =", 
        round(correlation$estimate, 3), 
        ", p =", round(correlation$p.value, 4), "\n")
  }
}
```

## Key Findings from Experiment 1_2

1. **Reproducibility**: `r if(exists("common_species") && nrow(common_species) >= 3) paste("Growth performance showed", ifelse(correlation$estimate > 0.7, "strong", ifelse(correlation$estimate > 0.4, "moderate", "weak")), "correlation (r =", round(correlation$estimate, 3), ") between experiments") else "Limited overlap between experiments prevents correlation analysis"`

2. **Top Performers**: `r if(nrow(exp2_growth_data) > 0) paste(exp2_growth_data$species[1], "showed highest growth in Experiment 1_2 with", round(exp2_growth_data$mean_growth[1], 1), "cm²") else "Growth data pending"`

3. **E. coli Reduction**: `r if(exists("exp2_ecoli_data") && nrow(exp2_ecoli_data) > 0) paste(nrow(exp2_ecoli_data), "species showed measurable E. coli reduction") else "Limited E. coli data available"`

## Weight Change Analysis for Experiment 1_2

```{r exp2-weight-analysis}
# Load data if not already loaded
if(!exists("exp_data")) {
  exp_data <- read_csv(here("data/processed/experiment_final.csv"), show_col_types = FALSE) %>%
    mutate(
      experiment = case_when(
        experiment == "1_1" ~ "Experiment 1.1",
        experiment == "1_2" ~ "Experiment 1.2",
        TRUE ~ experiment
      ),
      species = ifelse(species == "ctrl", "Control", species)
    )
}

# Focused weight analysis for Experiment 1_2
exp2_weight_data <- exp_data %>%
  filter(experiment == "Experiment 1.2", !is.na(weight_14dpi)) %>%
  mutate(
    weight_change = weight_14dpi - weight_0dpi,
    weight_percent_change = (weight_change / weight_0dpi) * 100,
    # Calculate dry weights if water content available
    dry_weight_14dpi = if("water_content_14dpi" %in% names(.)) {
      weight_14dpi * (1 - water_content_14dpi)
    } else {
      NA_real_
    },
    # Estimate initial dry weight (assuming similar water content)
    dry_weight_0dpi = if("water_content_14dpi" %in% names(.)) {
      weight_0dpi * (1 - water_content_14dpi)
    } else {
      NA_real_
    },
    dry_weight_change = dry_weight_14dpi - dry_weight_0dpi,
    dry_weight_percent_change = (dry_weight_change / dry_weight_0dpi) * 100,
    species_type = ifelse(species == "Control", "Control", "Fungal Treatment")
  )

# Summary by species
exp2_weight_summary <- exp2_weight_data %>%
  group_by(species) %>%
  summarise(
    n = n(),
    initial_weight = mean(weight_0dpi, na.rm = TRUE),
    final_weight = mean(weight_14dpi, na.rm = TRUE),
    weight_loss_percent = -mean(weight_percent_change, na.rm = TRUE),
    water_content = mean(water_content_14dpi, na.rm = TRUE) * 100,
    dry_matter_loss = if(any(!is.na(dry_weight_percent_change))) {
      -mean(dry_weight_percent_change, na.rm = TRUE)
    } else {
      NA_real_
    },
    .groups = "drop"
  ) %>%
  arrange(desc(weight_loss_percent))

# Display weight change table
if(nrow(exp2_weight_summary) > 0) {
  kable(
    exp2_weight_summary %>%
      mutate(across(where(is.numeric), ~ round(.x, 2))),
    caption = "**Table Y.** Weight changes in Experiment 1.2 showing decomposition efficiency",
    col.names = c("Species", "N", "Initial (g)", "Final (g)", "Weight Loss (%)", 
                  "Water Content (%)", "Dry Matter Loss (%)")
  )
} else {
  cat("No weight change data available for Experiment 1.2\n")
}
```

```{r exp2-weight-visualization, fig.height=8, fig.cap="**Figure X.** Experiment 1.2 weight changes and decomposition patterns. (A) Total weight loss by species. (B) Relationship between fungal growth and weight loss. (C) Water content at day 14."}
if(nrow(exp2_weight_data) > 0) {
  # Panel A: Weight loss by species
  p1 <- ggplot(exp2_weight_summary, aes(x = reorder(species, weight_loss_percent), 
                                         y = weight_loss_percent)) +
    geom_col(fill = "chocolate", alpha = 0.7) +
    coord_flip() +
    labs(x = "", y = "Weight Loss (%)",
         subtitle = "(A) Decomposition efficiency by species") +
    theme_minimal(base_size = 12)
  
  # Panel B: Growth vs weight loss correlation
  correlation_data <- exp2_weight_data %>%
    filter(!is.na(area_percent_change))
  
  if(nrow(correlation_data) > 5) {
    cor_test <- cor.test(correlation_data$area_percent_change, 
                        -correlation_data$weight_percent_change)
    
    p2 <- ggplot(correlation_data, aes(x = area_percent_change, y = -weight_percent_change)) +
      geom_point(aes(color = species_type), size = 3, alpha = 0.7) +
      geom_smooth(method = "lm", se = TRUE, color = "black", linetype = "dashed") +
      scale_color_manual(values = c("Control" = "red", "Fungal Treatment" = "forestgreen")) +
      labs(x = "Fungal Growth (%)", y = "Weight Loss (%)",
           subtitle = paste("(B) Growth-decomposition relationship (r =", 
                           round(cor_test$estimate, 3), ")"),
           color = "Treatment") +
      theme_minimal(base_size = 12) +
      theme(legend.position = "bottom")
  } else {
    p2 <- NULL
  }
  
  # Panel C: Water content
  p3 <- ggplot(exp2_weight_summary %>% filter(!is.na(water_content)), 
               aes(x = reorder(species, water_content), y = water_content)) +
    geom_col(fill = "skyblue", alpha = 0.7) +
    geom_hline(yintercept = 50, linetype = "dashed", color = "red", alpha = 0.5) +
    coord_flip() +
    labs(x = "", y = "Water Content (%)",
         subtitle = "(C) Final moisture levels") +
    theme_minimal(base_size = 12)
  
  # Combine plots
  if(!is.null(p2)) {
    p1 / p2 / p3
  } else {
    p1 / p3
  }
}
```

### Key Weight Change Findings

1. **Decomposition Leaders**: `r if(nrow(exp2_weight_summary) > 0) paste(exp2_weight_summary$species[1], "showed highest weight loss (", round(exp2_weight_summary$weight_loss_percent[1], 1), "%), indicating superior decomposition") else "Weight data analysis pending"`
2. **Water vs Organic Matter**: `r if(nrow(exp2_weight_summary) > 0) paste("Average water content at day 14 was", round(mean(exp2_weight_summary$water_content, na.rm = TRUE), 1), "%") else "Water content data pending"`
3. **Growth-Decomposition Link**: `r if(exists("cor_test")) paste("Fungal growth showed", ifelse(cor_test$estimate > 0.5, "strong positive", ifelse(cor_test$estimate > 0.3, "moderate positive", "weak")), "correlation with decomposition") else "Correlation analysis pending"`

# Comprehensive Performance Summary

```{r performance-summary, fig.height=10, fig.cap="**Figure Z.** Integrated performance assessment of fungal species across all measured parameters. Size indicates sample size, position shows growth vs decomposition efficiency, and color indicates E. coli reduction capability."}
# Create integrated performance data
performance_data <- exp_data %>%
  filter(species != "Control") %>%
  group_by(species) %>%
  summarise(
    n = n(),
    mean_growth = mean(area_percent_change, na.rm = TRUE),
    se_growth = sd(area_percent_change, na.rm = TRUE) / sqrt(sum(!is.na(area_percent_change))),
    mean_weight_loss = mean((weight_0dpi - weight_14dpi) / weight_0dpi * 100, na.rm = TRUE),
    mean_ecoli_reduction = mean(e_coli_log_reduction, na.rm = TRUE),
    ph_change = mean(ph_14dpi - ph_0dpi, na.rm = TRUE),
    has_ecoli_data = any(!is.na(e_coli_log_reduction)),
    .groups = "drop"
  ) %>%
  filter(!is.na(mean_growth))

# Create performance matrix plot
if(nrow(performance_data) > 0) {
  p_matrix <- ggplot(performance_data, aes(x = mean_growth, y = mean_weight_loss)) +
    geom_point(aes(size = n, color = mean_ecoli_reduction), alpha = 0.7) +
    geom_text(aes(label = species), vjust = -1, size = 3) +
    scale_size_continuous(range = c(3, 10), name = "Sample Size") +
    scale_color_gradient2(low = "blue", mid = "yellow", high = "red", 
                         midpoint = 0.5, na.value = "grey50",
                         name = "E. coli\nLog Reduction") +
    labs(x = "Fungal Growth (%)", y = "Weight Loss (%)",
         title = "Integrated Performance Assessment",
         subtitle = "Position shows growth-decomposition balance, color shows antimicrobial effect") +
    theme_minimal(base_size = 12) +
    theme(legend.position = "right")
  
  print(p_matrix)
}

# Create ranking table
rankings <- performance_data %>%
  mutate(
    growth_rank = rank(desc(mean_growth)),
    decomp_rank = rank(desc(mean_weight_loss)),
    ecoli_rank = ifelse(has_ecoli_data, rank(desc(mean_ecoli_reduction)), NA),
    overall_score = (1/growth_rank + 1/decomp_rank + ifelse(!is.na(ecoli_rank), 1/ecoli_rank, 0)) / 
                   (2 + !is.na(ecoli_rank))
  ) %>%
  arrange(desc(overall_score)) %>%
  select(species, growth_rank, decomp_rank, ecoli_rank, overall_score)

# Display top performers
kable(
  rankings %>%
    head(10) %>%
    mutate(overall_score = round(overall_score, 3)),
  caption = "**Table Z.** Top 10 fungal species ranked by integrated performance score",
  col.names = c("Species", "Growth Rank", "Decomposition Rank", "E. coli Rank", "Overall Score")
)
```

## Performance Categories

```{r performance-categories}
# Categorize species by primary strength
categories <- performance_data %>%
  mutate(
    primary_strength = case_when(
      mean_growth > quantile(mean_growth, 0.75, na.rm = TRUE) & 
        mean_weight_loss > quantile(mean_weight_loss, 0.75, na.rm = TRUE) ~ "All-rounder",
      mean_growth > quantile(mean_growth, 0.75, na.rm = TRUE) ~ "Growth specialist",
      mean_weight_loss > quantile(mean_weight_loss, 0.75, na.rm = TRUE) ~ "Decomposer",
      mean_ecoli_reduction > 1 & !is.na(mean_ecoli_reduction) ~ "Antimicrobial",
      TRUE ~ "Moderate performer"
    )
  ) %>%
  group_by(primary_strength) %>%
  summarise(
    species_list = paste(species, collapse = ", "),
    count = n(),
    .groups = "drop"
  )

# Display categories
for(i in 1:nrow(categories)) {
  cat("**", categories$primary_strength[i], "** (", categories$count[i], " species): ", 
      categories$species_list[i], "\n\n", sep = "")
}
```

# Conclusions

This evaluation reveals significant variation in fungal species performance for fecal treatment applications, with clear species-specific advantages for different treatment objectives.

## Primary Conclusions

1. **Growth Performance**: Species showed dramatic differences in decomposition capacity, with top performers achieving `r round(max(growth_viz_data$mean_growth, na.rm = TRUE), 1)` cm² growth versus `r round(min(growth_viz_data$mean_growth, na.rm = TRUE), 1)` cm² for poorest performers.

2. **Antimicrobial Effectiveness**: `r if(nrow(ecoli_viz) > 0) paste("Limited but promising antimicrobial results, with", ecoli_viz$species[1], "showing", ecoli_viz$mean_log_reduction[1], "log E. coli reduction") else "Antimicrobial assessment requires expanded experimental scope"`

3. **Environmental Modification**: `r if(exists("ph_summary") && nrow(ph_summary) > 0) paste("pH changes ranged from", round(min(ph_summary$ph_change_mean), 2), "to", round(max(ph_summary$ph_change_mean), 2), "units") else "pH data pending"`. `r if(exists("weight_summary") && nrow(weight_summary) > 0) paste("Wet weight reduction averaged", round(abs(mean(weight_summary$weight_change_percent_mean)), 1), "% over 14 days") else "Weight change data pending"`. `r if(exists("dry_weight_summary") && nrow(dry_weight_summary) > 0) paste("Dry weight reduction averaged", round(abs(mean(dry_weight_summary$dry_weight_percent_change_mean)), 1), "%, indicating substantial organic matter decomposition") else "Dry weight data pending"`.

4. **Application-Specific Selection**: Different species excel in different applications, supporting targeted species selection based on treatment priorities.

## Recommendations for Implementation

**Immediate Actions:**
- Prioritize `r growth_viz_data$species[1]` for rapid decomposition applications
- Expand antimicrobial testing across all high-growth species
- Develop standardized protocols for species cultivation and application

**Strategic Development:**
- Design modular treatment systems allowing species optimization for local conditions
- Establish supply chains for consistent inoculum production and quality control
- Develop monitoring protocols for treatment effectiveness verification

## Research Impact

This study provides the first systematic comparison of fungal species performance in fecal treatment, establishing a quantitative framework for species selection and system design. The findings support evidence-based development of sustainable, biologically-based waste treatment technologies with global implementation potential.

Future research should focus on expanding the antimicrobial assessment scope and validating laboratory findings through field trials, ultimately leading to practical treatment systems for resource-limited settings where traditional sewage treatment is unavailable.

---

*Analysis conducted using R statistical software. Data and code available upon request.*