---
title: "Fungal Treatment Area Size and E. coli Analysis"
author: "Analysis Report"
date: today
format: html
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = FALSE, warning = FALSE, message = FALSE)
library(tidyverse)
library(ggplot2)
library(scales)

# Try to load multcompView, install if needed
if (!requireNamespace("multcompView", quietly = TRUE)) {
  install.packages("multcompView", repos = "https://cran.r-project.org")
}
library(multcompView)
```

## Data Import and Preparation

```{r statistical-functions}
# Function to perform Tukey HSD and get letter groups
get_letter_groups <- function(data, response_var, group_var) {
  # Check if there's variance in the data
  if(length(unique(data[[group_var]])) < 2) {
    return(data.frame())
  }
  
  # Perform ANOVA
  formula_str <- paste(response_var, "~", group_var)
  aov_result <- aov(as.formula(formula_str), data = data)
  
  # Get Tukey HSD results
  tukey_result <- TukeyHSD(aov_result)
  
  # Try to use multcompView if available, otherwise use simple approach
  if (exists("multcompLetters4")) {
    # Extract compact letter display
    tukey_letters <- multcompLetters4(aov_result, tukey_result)
    
    # Create dataframe with letters
    letters_df <- data.frame(
      group = names(tukey_letters[[group_var]]$Letters),
      letters = tukey_letters[[group_var]]$Letters,
      stringsAsFactors = FALSE
    )
    names(letters_df)[1] <- group_var
  } else {
    # Fallback: create simple letter groups based on p-values
    # Get group means
    group_means <- aggregate(data[[response_var]], 
                           by = list(data[[group_var]]), 
                           FUN = mean, na.rm = TRUE)
    names(group_means) <- c(group_var, "mean")
    group_means <- group_means[order(group_means$mean, decreasing = TRUE), ]
    
    # Simple letter assignment (not as sophisticated as multcompView)
    # Groups are assigned letters based on significance threshold
    p_values <- tukey_result[[1]][, "p adj"]
    
    # For simplicity, just mark significantly different groups
    letters_df <- data.frame(
      group = group_means[[group_var]],
      letters = LETTERS[seq_len(nrow(group_means))],
      stringsAsFactors = FALSE
    )
    names(letters_df)[1] <- group_var
  }
  
  return(letters_df)
}
```

```{r data-import}
# Read the experiment data
experiment_data <- read.csv("../data/processed/experiment_final.csv")

# View structure of the data
str(experiment_data)
```

## Area Size Analysis

### Data Filtering

We'll filter for samples that have area size measurements at either:
- Both 0dpi and 7dpi, OR
- 14dpi

```{r filter-data}
# Filter for samples with valid area size measurements
area_data <- experiment_data %>%
  filter(
    (!is.na(area_size_0dpi) & !is.na(area_size_7dpi)) | !is.na(area_size_14dpi)
  ) %>%
  # Remove control samples as they don't show growth
  filter(species != "ctrl")

# Check how many samples we have per species
area_data %>%
  group_by(species) %>%
  summarise(n_samples = n())
```

### Data Reshaping for Area Size Plot

```{r reshape-area-data}
# Reshape data to long format for area size
area_long <- area_data %>%
  select(id_treatment, species, id_inoc, id_faeces, starting_date, 
         area_size_0dpi, area_size_7dpi, area_size_14dpi) %>%
  pivot_longer(
    cols = c(area_size_0dpi, area_size_7dpi, area_size_14dpi),
    names_to = "timepoint",
    values_to = "area_size",
    names_prefix = "area_size_"
  ) %>%
  filter(!is.na(area_size)) %>%
  mutate(
    timepoint = factor(timepoint, levels = c("0dpi", "7dpi", "14dpi"))
  )

# Calculate summary statistics
area_summary <- area_long %>%
  group_by(species, id_inoc, starting_date, timepoint) %>%
  summarise(
    mean_area = mean(area_size, na.rm = TRUE),
    sd_area = sd(area_size, na.rm = TRUE),
    se_area = sd_area / sqrt(n()),
    n = n(),
    .groups = "drop"
  )

# View the summary
area_summary
```

### Area Size Visualization

```{r species-order}
# Define consistent species order based on overall growth
species_order <- area_summary %>%
  filter(timepoint == "14dpi") %>%
  group_by(species) %>%
  summarise(mean_area_final = mean(mean_area, na.rm = TRUE)) %>%
  arrange(desc(mean_area_final)) %>%
  pull(species)

# Apply the ordering to the data
area_summary <- area_summary %>%
  mutate(species = factor(species, levels = species_order))
```

```{r area-size-plot, fig.width=12, fig.height=7}
# Define colors for each species
species_colors <- scales::hue_pal()(length(species_order))
names(species_colors) <- species_order

# First, we need to get the faeces ID for each data point in area_summary
# Join back with original data to get id_faeces
area_summary_with_faeces <- area_summary %>%
  left_join(
    area_long %>%
      select(species, id_inoc, starting_date, timepoint, id_faeces) %>%
      distinct(),
    by = c("species", "id_inoc", "starting_date", "timepoint")
  )

# Get significance letters for each timepoint
significance_letters <- area_long %>%
  group_by(timepoint) %>%
  group_modify(~ {
    if(length(unique(.x$species)) > 1 && sum(!is.na(.x$area_size)) > 0) {
      letters <- get_letter_groups(.x, "area_size", "species")
      return(letters)
    } else {
      return(data.frame(species = character(), letters = character()))
    }
  }) %>%
  ungroup()

# Add significance letters to summary data
area_summary_with_letters <- area_summary_with_faeces %>%
  left_join(significance_letters, by = c("species", "timepoint"))

# Calculate position for letters (above error bars)
area_summary_with_letters <- area_summary_with_letters %>%
  mutate(letter_y = mean_area + se_area + max(mean_area) * 0.05)

# Create the area size plot with consistent ordering and species colors
p1 <- ggplot(area_summary_with_letters, aes(x = species, y = mean_area, color = species)) +
  geom_point(size = 4) +
  geom_errorbar(
    aes(ymin = mean_area - se_area, ymax = mean_area + se_area),
    width = 0.2
  ) +
  # Add faeces numbers as text labels
  geom_text(
    aes(label = id_faeces),
    color = "black",
    size = 3,
    vjust = -0.5,
    hjust = 0.5
  ) +
  # Add significance letters
  geom_text(
    aes(y = letter_y, label = letters),
    color = "black",
    size = 4,
    vjust = 0,
    hjust = 0.5
  ) +
  facet_wrap(~timepoint, nrow = 1) +
  theme_bw() +
  theme(
    axis.text.x = element_text(angle = 45, hjust = 1, vjust = 1),
    legend.position = "none"  # Remove legend since species are on x-axis
  ) +
  labs(
    title = "Fungal Growth Area Size Over Time",
    subtitle = "Points show mean ± SE; numbers = faeces sample; letters = statistical groups (Tukey HSD, p<0.05)",
    x = "Species",
    y = "Area Size (cm²)"
  ) +
  scale_color_manual(values = species_colors)

print(p1)
```

### Area Size Line Plot Over Time

```{r area-line-plot-prep}
# Prepare data for line plot - combine all treatments by species
area_species_summary <- area_long %>%
  group_by(species, timepoint) %>%
  summarise(
    mean_area = mean(area_size, na.rm = TRUE),
    sd_area = sd(area_size, na.rm = TRUE),
    se_area = sd_area / sqrt(n()),
    n = n(),
    .groups = "drop"
  ) %>%
  mutate(
    species = factor(species, levels = species_order),
    dpi = as.numeric(gsub("dpi", "", timepoint))
  )
```

```{r area-line-plot, fig.width=10, fig.height=6}
# Add significance letters for 14 DPI to the species summary
letters_14dpi <- significance_letters %>%
  filter(timepoint == "14dpi") %>%
  select(species, letters)

area_species_summary_letters <- area_species_summary %>%
  left_join(letters_14dpi, by = "species")

# Create line plot showing progression over time with same colors
p1_line <- ggplot(area_species_summary_letters, aes(x = dpi, y = mean_area, color = species, group = species)) +
  geom_line(size = 1.2) +
  geom_point(size = 3) +
  geom_errorbar(
    aes(ymin = mean_area - se_area, ymax = mean_area + se_area),
    width = 0.5
  ) +
  # Add significance letters at 14 DPI
  geom_text(
    data = area_species_summary_letters %>% filter(dpi == 14),
    aes(label = letters, y = mean_area + se_area + max(area_species_summary_letters$mean_area) * 0.02),
    color = "black",
    size = 4,
    vjust = 0,
    hjust = -0.2
  ) +
  scale_x_continuous(breaks = c(0, 7, 14), labels = c("0 DPI", "7 DPI", "14 DPI")) +
  scale_color_manual(values = species_colors) +
  theme_bw() +
  theme(legend.position = "right") +
  labs(
    title = "Fungal Growth Progression Over Time by Species",
    subtitle = "Lines show mean ± SE; letters at 14 DPI indicate statistical groups (Tukey HSD, p<0.05)",
    x = "Days Post Inoculation",
    y = "Area Size (cm²)",
    color = "Species"
  )

print(p1_line)
```

### Trichoderma Species Growth Curves

```{r trichoderma-plot-prep}
# Filter for Trichoderma species only - from raw long format data
trichoderma_long <- area_long %>%
  filter(grepl("^T\\.|^Trichoderma", species))

# Create summary for line plot
trichoderma_data <- area_species_summary %>%
  filter(grepl("^T\\.|^Trichoderma", species))

# Check if we have any Trichoderma species
if(nrow(trichoderma_data) > 0) {
  # Get unique Trichoderma species for color assignment
  trichoderma_species <- unique(trichoderma_data$species)
  trichoderma_colors <- scales::hue_pal()(length(trichoderma_species))
  names(trichoderma_colors) <- trichoderma_species
}
```

```{r trichoderma-line-plot, fig.width=10, fig.height=6}
# Create Trichoderma-specific growth plot
if(exists("trichoderma_data") && nrow(trichoderma_data) > 0) {
  
  # Get significance letters for Trichoderma species at each timepoint
  trichoderma_letters_by_time <- trichoderma_long %>%
    group_by(timepoint) %>%
    group_modify(~ {
      if(length(unique(.x$species)) > 1 && sum(!is.na(.x$area_size)) > 0) {
        letters <- get_letter_groups(.x, "area_size", "species")
        return(letters)
      } else {
        return(data.frame(species = character(), letters = character()))
      }
    }) %>%
    ungroup() %>%
    mutate(dpi = as.numeric(gsub("dpi", "", timepoint)))
  
  # Add letters to trichoderma data
  trichoderma_data_letters <- trichoderma_data %>%
    left_join(trichoderma_letters_by_time, by = c("species", "dpi"))
  
  p_trichoderma <- ggplot(trichoderma_data_letters, aes(x = dpi, y = mean_area, color = species, group = species)) +
    geom_line(size = 1.5) +
    geom_point(size = 4) +
    geom_errorbar(
      aes(ymin = mean_area - se_area, ymax = mean_area + se_area),
      width = 0.5,
      size = 1
    ) +
    # Add significance letters
    geom_text(
      aes(label = letters, y = mean_area + se_area + max(trichoderma_data_letters$mean_area) * 0.03),
      color = "black",
      size = 4,
      vjust = 0,
      hjust = 0.5
    ) +
    scale_x_continuous(breaks = c(0, 7, 14), labels = c("0 DPI", "7 DPI", "14 DPI")) +
    scale_color_manual(values = trichoderma_colors) +
    theme_bw() +
    theme(
      legend.position = "right",
      text = element_text(size = 12),
      legend.text = element_text(size = 11)
    ) +
    labs(
      title = "Trichoderma Species Growth Curves",
      subtitle = "Growth progression with significance letters at each timepoint (Tukey HSD, p<0.05)",
      x = "Days Post Inoculation",
      y = "Area Size (cm²)",
      color = "Trichoderma Species"
    )
  
  print(p_trichoderma)
} else {
  cat("No Trichoderma species found in the dataset.")
}
```

### Statistical Analysis of Trichoderma Growth Differences

```{r trichoderma-stats}
# Data already prepared in trichoderma-plot-prep chunk
if(exists("trichoderma_long") && nrow(trichoderma_long) > 0) {
  # Perform ANOVA for each time point
  timepoints <- c("0dpi", "7dpi", "14dpi")
  anova_results <- list()
  
  for(tp in timepoints) {
    tp_data <- trichoderma_long %>% filter(timepoint == tp)
    
    if(length(unique(tp_data$species)) > 1) {
      # Perform one-way ANOVA
      aov_result <- aov(area_size ~ species, data = tp_data)
      anova_results[[tp]] <- summary(aov_result)
      
      # Print ANOVA results
      cat("\n", tp, "ANOVA Results:\n")
      print(anova_results[[tp]])
      
      # If significant, perform post-hoc test
      if(summary(aov_result)[[1]][["Pr(>F)"]][1] < 0.05) {
        cat("\nSignificant differences found. Performing Tukey HSD post-hoc test:\n")
        tukey_result <- TukeyHSD(aov_result)
        print(tukey_result)
      }
    }
  }
  
  # Create a summary table of mean areas by species and timepoint
  trichoderma_summary_stats <- trichoderma_long %>%
    group_by(species, timepoint) %>%
    summarise(
      n = n(),
      mean_area = round(mean(area_size), 3),
      sd = round(sd(area_size), 3),
      se = round(sd/sqrt(n), 3),
      .groups = "drop"
    ) %>%
    pivot_wider(
      names_from = timepoint,
      values_from = c(mean_area, sd, se, n),
      names_glue = "{timepoint}_{.value}"
    )
  
  knitr::kable(trichoderma_summary_stats,
               caption = "Summary Statistics for Trichoderma Species Growth (Area in cm²)")
  
  # Test for growth over time using repeated measures or mixed model
  cat("\n\nGrowth Analysis Over Time:\n")
  
  # Calculate growth rates
  growth_analysis <- trichoderma_long %>%
    select(id_treatment, species, timepoint, area_size) %>%
    pivot_wider(names_from = timepoint, values_from = area_size) %>%
    filter(!is.na(`0dpi`) & (!is.na(`7dpi`) | !is.na(`14dpi`))) %>%
    mutate(
      growth_0_to_7 = `7dpi` - `0dpi`,
      growth_0_to_14 = `14dpi` - `0dpi`
    )
  
  # Test if growth rates differ between species
  if(sum(!is.na(growth_analysis$growth_0_to_14)) > 0) {
    growth_aov <- aov(growth_0_to_14 ~ species, data = growth_analysis)
    cat("\nANOVA for growth from 0 to 14 DPI:\n")
    print(summary(growth_aov))
    
    if(summary(growth_aov)[[1]][["Pr(>F)"]][1] < 0.05) {
      cat("\nTukey HSD for growth differences:\n")
      print(TukeyHSD(growth_aov))
    }
  }
  
  
  # Create ranking table for best growing Trichoderma isolates
  trichoderma_ranking <- trichoderma_long %>%
    filter(timepoint == "14dpi") %>%
    group_by(species) %>%
    summarise(
      n_samples = n(),
      final_area_mean = round(mean(area_size, na.rm = TRUE), 3),
      final_area_sd = round(sd(area_size, na.rm = TRUE), 3),
      .groups = "drop"
    ) %>%
    # Add initial area for growth calculation
    left_join(
      trichoderma_long %>%
        filter(timepoint == "0dpi") %>%
        group_by(species) %>%
        summarise(initial_area_mean = round(mean(area_size, na.rm = TRUE), 3), .groups = "drop"),
      by = "species"
    ) %>%
    mutate(
      total_growth = round(final_area_mean - initial_area_mean, 3),
      growth_fold = round(final_area_mean / initial_area_mean, 2),
      growth_percent = round((growth_fold - 1) * 100, 1)
    ) %>%
    arrange(desc(final_area_mean)) %>%
    mutate(rank = row_number())
  
  # Display ranking table
  cat("\n\n### Trichoderma Isolates Ranked by Growth Performance\n")
  
  trichoderma_ranking_display <- trichoderma_ranking %>%
    select(rank, species, final_area_mean, final_area_sd, total_growth, growth_percent, n_samples) %>%
    rename(
      "Rank" = rank,
      "Species" = species,
      "Final Area (cm²)" = final_area_mean,
      "SD" = final_area_sd,
      "Total Growth (cm²)" = total_growth,
      "Growth (%)" = growth_percent,
      "N" = n_samples
    )
  
  knitr::kable(trichoderma_ranking_display,
               caption = "Trichoderma isolates ranked by final area size at 14 DPI (best performers on top)")
  
} else {
  cat("No Trichoderma species found for statistical analysis.")
}
```

## E. coli Concentration Analysis at 14 DPI

### Data Preparation for E. coli Analysis

```{r ecoli-data-prep}
# Get E. coli data at 14 dpi (including controls)
ecoli_14dpi <- experiment_data %>%
  filter(!is.na(ecoli_conc_13dpi)) %>%  # Using ecoli_conc_13dpi as the 14dpi measurement
  group_by(species, id_inoc, starting_date) %>%
  summarise(
    mean_ecoli_14dpi = mean(ecoli_conc_13dpi, na.rm = TRUE),
    sd_ecoli_14dpi = sd(ecoli_conc_13dpi, na.rm = TRUE),
    se_ecoli_14dpi = sd_ecoli_14dpi / sqrt(n()),
    n = n(),
    mean_ecoli_0dpi = first(ecoli_conc_mean),  # Initial E. coli concentration
    .groups = "drop"
  )

# Overall summary by species (including controls)
ecoli_summary <- ecoli_14dpi %>%
  group_by(species) %>%
  summarise(
    mean_ecoli = mean(mean_ecoli_14dpi, na.rm = TRUE),
    sd_ecoli = sd(mean_ecoli_14dpi, na.rm = TRUE),
    se_ecoli = sd_ecoli / sqrt(n()),
    n = n(),
    mean_initial_ecoli = mean(mean_ecoli_0dpi, na.rm = TRUE),
    .groups = "drop"
  )

# Apply consistent species ordering (add ctrl if not in species_order)
all_species <- unique(ecoli_summary$species)
missing_species <- setdiff(all_species, species_order)
final_species_order <- c(species_order, missing_species)

ecoli_summary <- ecoli_summary %>%
  mutate(species = factor(species, levels = final_species_order))

print(ecoli_summary)
```

### E. coli Concentration Visualization

```{r ecoli-plot, fig.width=10, fig.height=6}
# Calculate the mean initial E. coli concentration across all samples
mean_initial_ecoli <- mean(ecoli_14dpi$mean_ecoli_0dpi, na.rm = TRUE)

# Get significance letters for E. coli data (using log-transformed values)
ecoli_letters <- ecoli_14dpi %>%
  filter(!is.na(mean_ecoli_14dpi) & mean_ecoli_14dpi > 0) %>%
  mutate(log_ecoli = log10(mean_ecoli_14dpi)) %>%
  {
    if(length(unique(.$species)) > 1) {
      get_letter_groups(., "log_ecoli", "species")
    } else {
      data.frame(species = character(), letters = character())
    }
  }

# Add letters to summary
ecoli_summary_letters <- ecoli_summary %>%
  left_join(ecoli_letters, by = "species") %>%
  mutate(
    # Position letters above error bars on log scale
    letter_y = mean_ecoli * 10^0.3
  )

# Create the E. coli concentration plot
p2 <- ggplot(ecoli_summary_letters, aes(x = species, y = mean_ecoli)) +
  geom_point(aes(color = species == "ctrl"), size = 4) +
  geom_errorbar(
    aes(ymin = mean_ecoli - se_ecoli, ymax = mean_ecoli + se_ecoli),
    width = 0.2
  ) +
  # Add significance letters
  geom_text(
    aes(y = letter_y, label = letters),
    color = "black",
    size = 4,
    vjust = 0,
    hjust = 0.5
  ) +
  geom_hline(yintercept = mean_initial_ecoli, 
             linetype = "dashed", 
             color = "blue", 
             linewidth = 1) +
  scale_y_log10(
    labels = scales::scientific,
    breaks = 10^(0:10)
  ) +
  scale_color_manual(values = c("FALSE" = "darkred", "TRUE" = "gray50"),
                     labels = c("FALSE" = "Treatment", "TRUE" = "Control"),
                     name = "Sample Type") +
  theme_bw() +
  theme(
    axis.text.x = element_text(angle = 45, hjust = 1, vjust = 1)
  ) +
  labs(
    title = "E. coli Concentration at 14 DPI by Species (Including Controls)",
    subtitle = paste("Blue line = initial conc.; letters = statistical groups (Tukey HSD, p<0.05, log-transformed)"),
    x = "Species",
    y = "E. coli Concentration (CFU/g) - Log Scale"
  ) +
  annotation_logticks(sides = "l")

print(p2)
```

## Replication Summary

### Technical and Biological Replicates

```{r replicate-summary}
# Calculate replicates summary
# Total assays = total number of samples/treatments for each species
# Biological replicates = number of different starting dates for each species

replicate_summary <- experiment_data %>%
  filter(!is.na(area_size_0dpi) | !is.na(area_size_7dpi) | !is.na(area_size_14dpi)) %>%
  group_by(species) %>%
  summarise(
    total_assays = n(),  # Total number of assays/samples
    biological_replicates = n_distinct(starting_date),  # Number of different starting dates
    .groups = "drop"
  ) %>%
  arrange(desc(total_assays))  # Sort by total assays in descending order

# Display summary table
knitr::kable(replicate_summary, 
             caption = "Summary of Assays and Biological Replicates by Species",
             col.names = c("Species", "Total Assays", "Biological Replicates"))
```

## Summary Statistics

### Area Size Growth Summary

```{r area-growth-summary}
# Calculate growth rates
growth_summary <- area_data %>%
  filter(!is.na(area_size_0dpi)) %>%
  group_by(species) %>%
  summarise(
    n_samples = n(),
    mean_initial_area = mean(area_size_0dpi, na.rm = TRUE),
    mean_7dpi_area = mean(area_size_7dpi, na.rm = TRUE),
    mean_14dpi_area = mean(area_size_14dpi, na.rm = TRUE),
    growth_0_to_7 = mean_7dpi_area - mean_initial_area,
    growth_0_to_14 = mean_14dpi_area - mean_initial_area,
    .groups = "drop"
  ) %>%
  arrange(desc(growth_0_to_14))

knitr::kable(growth_summary, digits = 2, 
             caption = "Area Size Growth Summary by Species")
```

### E. coli Reduction Summary

```{r ecoli-reduction-summary}
# Calculate E. coli reduction
ecoli_reduction <- ecoli_summary %>%
  mutate(
    log_reduction = log10(mean_initial_ecoli) - log10(mean_ecoli),
    percent_reduction = (1 - mean_ecoli/mean_initial_ecoli) * 100
  ) %>%
  arrange(desc(log_reduction))

knitr::kable(ecoli_reduction, digits = 2,
             caption = "E. coli Reduction Summary by Species")
```

## Combined Visualization

```{r combined-plot, fig.width=14, fig.height=12}
# Combine all plots
library(patchwork)

combined_plot <- (p1 / p1_line / p2) + 
  plot_annotation(
    title = "Fungal Growth and E. coli Reduction Analysis",
    theme = theme(plot.title = element_text(size = 16, face = "bold"))
  )

print(combined_plot)
```

## Conclusions

This analysis shows:

1. **Area Size Growth**: Different fungal species show varying growth patterns over the 14-day period.

2. **E. coli Reduction**: The effectiveness of different fungal species in reducing E. coli concentration varies significantly.

3. **Treatment Effectiveness**: Some species show both good growth and effective E. coli reduction, making them promising candidates for faecal treatment.